<glob:CNotifyPropertyChangedWnd x:Class="DBManager.MainWindow"
								xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
								xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
								xmlns:sys="clr-namespace:System;assembly=mscorlib"
								xmlns:glob="clr-namespace:DBManager.Global"
								xmlns:gconvs="clr-namespace:DBManager.Global.Converters"
								xmlns:ribbon="clr-namespace:Microsoft.Windows.Controls.Ribbon;assembly=RibbonControlsLibrary"
								ResizeMode="CanResizeWithGrip"
								xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
								xmlns:local="clr-namespace:DBManager"
								xmlns:rpnls="clr-namespace:DBManager.RightPanels"
								xmlns:localctrls="clr-namespace:DBManager.InterfaceElements"
								xmlns:rmconvs="clr-namespace:DBManager.RoundMembers.Converters"
								x:Name="mainWindow"
								Icon="/DBManager;component/Icons/AppIcon_tune.ico"
								Loaded="Window_Loaded"
								WindowState="Maximized">
	<glob:CNotifyPropertyChangedWnd.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="RibbonStyles.xaml" />
				<ResourceDictionary Source="RoundResultsControl\RoundResultsDataGridTemplates.xaml" />
			</ResourceDictionary.MergedDictionaries>

			<CollectionViewSource x:Key="vsrcCurrentRoundMembers" />
			<CollectionViewSource x:Key="vsrcCurrentRoundMembers2" />
		</ResourceDictionary>
	</glob:CNotifyPropertyChangedWnd.Resources>
	
	<!--Список команд-->
	<glob:CNotifyPropertyChangedWnd.CommandBindings>
		<!-- Команда отображения выпадающего меню с параметрами фильтрации -->
		<CommandBinding Command="{x:Static local:MainWindow.cmdOpenFilterPopup}"
						Executed="OpenFilterPopupCmdExecuted"
						CanExecute="OpenFilterPopupCmdCanExecute"/>
	</glob:CNotifyPropertyChangedWnd.CommandBindings>

	<DockPanel LastChildFill="True"
			   Name="dpMain">
		<!-- Ribbon -->
		<ribbon:Ribbon x:Name="Ribbon"
					   DockPanel.Dock="Top"
					   SelectedIndex="0">
			<ribbon:Ribbon.QuickAccessToolBar>
				<ribbon:RibbonQuickAccessToolBar AllowDrop="False" />
			</ribbon:Ribbon.QuickAccessToolBar>

			<ribbon:Ribbon.Resources>
				<Style TargetType="{x:Type ribbon:RibbonButton}">
					<Setter Property="CanAddToQuickAccessToolBarDirectly"
							Value="false" />
				</Style>
				<Style TargetType="{x:Type ribbon:RibbonApplicationMenuItem}">
					<Setter Property="CanAddToQuickAccessToolBarDirectly"
							Value="false" />
				</Style>
			</ribbon:Ribbon.Resources>

			<ribbon:Ribbon.HelpPaneContent>
				<StackPanel Orientation="Horizontal">
					<TextBlock Text="{Loc resGodsMode}"
							   Padding="5,1,5,1"
							   Background="Red"
							   Visibility="{Binding GodsMode, Converter={gconvs:BoolToVisibilityMarkupConverter UnvisibleValue=Hidden}}"/>
					<TextBlock Name="txtblkErrLogItemChanged"
							   Text="{Loc resErrLogItemChanged}"
							   Padding="5,1,5,1"
							   Background="Red"
							   Visibility="Hidden"/>
					<ribbon:RibbonButton SmallImageSource="/DBManager;component/RibbonIcons/Help_6.png"
										 Click="rsmiAbout_Click" />
				</StackPanel>
			</ribbon:Ribbon.HelpPaneContent>

			<ribbon:Ribbon.ApplicationMenu>
				<ribbon:RibbonApplicationMenu>
					<ribbon:RibbonApplicationMenuItem x:Name="ramiExportToXls"
														Header="{Loc resExportToXls}"
														ImageSource="/DBManager;component/Icons/KEY_EXPORT_XLS.png"
														IsEnabled="{Binding ExportToXlsEnabled}"
														Style="{StaticResource RibbonApplicationMenuItemWithGoodImgScaling}"
														Click="ExportToXlsCmdExecuted" />
                    <ribbon:RibbonApplicationMenuItem x:Name="ramiExportFromXls"
														Header="{Loc resCreateCompetition}"
														ImageSource="/DBManager;component/Icons/new_comp.png"
														IsEnabled="{Binding CreateCompetitionEnabled}"
														Style="{StaticResource RibbonApplicationMenuItemWithGoodImgScaling}"
														Click="CreateCompetitionCmdExecuted" />
				</ribbon:RibbonApplicationMenu>
			</ribbon:Ribbon.ApplicationMenu>

			<ribbon:RibbonTab x:Name="ribtabMain"
							  Header="{Loc resMain}">
				<ribbon:RibbonGroup Header="{Loc resTableUpdating}">
					<ribbon:RibbonButton Name="rbtnStartStop"
										 Label="{Loc resAutoupdating}"
										 Style="{StaticResource StartStopRibbonButtonStyle}"
										 Template="{StaticResource RibbonButtonWithGoodImgScalingTemplate}"
										 Click="StartCmdExecuted" />
					<ribbon:RibbonButton LargeImageSource="/RibbonIcons/Refresh.png"
										 Label="{Loc resRefresh}"
										 IsEnabled="{Binding RefreshEnabled}"
										 ToolTip="{Loc resRefreshToolTip}"
										 Template="{StaticResource RibbonButtonWithGoodImgScalingTemplate}"
										 Click="RefreshCmdExecuted" />
					<ribbon:RibbonButton LargeImageSource="/RibbonIcons/SyncDBWithFiles.png"
										 Label="{Loc resSyncDBWithFiles}"
										 IsEnabled="{Binding SyncDBWithFilesEnabled}"
										 ToolTip="{Loc resSyncDBWithFilesToolTip}"
										 Template="{StaticResource RibbonButtonWithGoodImgScalingTemplate}"
										 Click="SyncDBWithFilesCmdExecuted" />
					<ribbon:RibbonButton LargeImageSource="/RibbonIcons/SyncDBWithFiles.png"
										 Label="{Loc resDBToGrid}"
										 IsEnabled="{Binding DBToGridEnabled}"
										 ToolTip="{Loc resDBToGridToolTip}"
										 Click="DBToGridCmdExecuted" />
				</ribbon:RibbonGroup>

				<ribbon:RibbonGroup Header="{Loc resTableContent}">
					<ribbon:RibbonMenuButton Name="rmbtnGroup"
											  Label="{Loc resSelectGroup}"
											  IsEnabled="{Binding CurrentGroups.Count, Converter={local:CollectionsCountToBoolMarkupConverter}}"
											  ItemsSource="{Binding CurrentGroups}">
						<ribbon:RibbonMenuButton.Resources>
							<Style TargetType="{x:Type ribbon:RibbonMenuItem}">
								<Setter Property="Header"
										Value="{Binding Path=Value.Value.AgeGroup.FullGroupName}" />
								<Setter Property="Command"
										Value="{Binding Path=Value.Command}" />
							</Style>
							</ribbon:RibbonMenuButton.Resources>
					</ribbon:RibbonMenuButton>

					<ribbon:RibbonMenuButton Name="rmbtnRound"
											  Label="{Loc resSelectRound}"
											 IsEnabled="{Binding CurrentRounds.Count, Converter={local:CollectionsCountToBoolMarkupConverter}}"
											  ItemsSource="{Binding CurrentRounds}">
						<ribbon:RibbonMenuButton.Resources>
							<Style TargetType="{x:Type ribbon:RibbonMenuItem}">
								<Setter Property="Header"
										Value="{Binding Path=Value.Value.Name}" />
								<Setter Property="Command"
										Value="{Binding Path=Value.Command}" />
							</Style>
						</ribbon:RibbonMenuButton.Resources>
					</ribbon:RibbonMenuButton>
					
					<ribbon:RibbonButton Name="rbtnOpenWorkbook"
										 SmallImageSource="/RibbonIcons/Open.png"
										 Label="{Loc resOpenWorkbook}"
										 IsEnabled="{Binding IsEnabled, ElementName=rmbtnRound}"
										 ToolTip="{Loc resOpenWorkbookToolTip}"
										 Click="OpenWorkbookCmdExecuted"/>
					
					<ribbon:RibbonCheckBox Name="rchkShowGroupHead"
										   Label="{Loc resShowGroupHead}"
										   IsChecked="True"
										   Click="rchkShowGroupHead_Click" />

					<ribbon:RibbonCheckBox Name="rchkAutoscrollEnabled"
										   Label="{Loc resAutoscrollEnabled}"
										   IsChecked="True"
										   Checked="rchkAutoscrollEnabled_CheckedUnchecked"
										   Unchecked="rchkAutoscrollEnabled_CheckedUnchecked"/>
				</ribbon:RibbonGroup>

                <ribbon:RibbonGroup Header="{Loc resPublishing}" IsEnabled="{Binding PublishingEnabled}" >
                    <ribbon:RibbonButton LargeImageSource="/RibbonIcons/PublishingSettings.png"
										 Label="{Loc resPublishingSettings}"
										 Click="PublishingSettingsCmdExecuted" />
                    <ribbon:RibbonButton LargeImageSource="/RibbonIcons/server-from-client.png"
										 Label="{Loc resPublishResults}"
										 Click="PublishResultsCmdExecuted" />
                    <ribbon:RibbonButton Name="rbtnPublishResultsLogWindow" 
										 LargeImageSource="/RibbonIcons/CreateReport.png"
										 Label="{Loc resPublishingLog}"
										 Click="PublishingLogCmdExecuted" />
                    <ribbon:RibbonCheckBox Name="rchkAutoPublishing"
										   Label="{Loc resAutoPublishing}"
										   Click="rchkAutoPublishing_Click"/>
				</ribbon:RibbonGroup>
			</ribbon:RibbonTab>

			<ribbon:RibbonTab x:Name="ribtabConfig"
							  Header="{Loc resConfig}">
				<ribbon:RibbonGroup Header="">
					<ribbon:RibbonButton Label="{Loc resSettings}"
										 LargeImageSource="RibbonIcons/settings.png"
										 IsEnabled="{Binding SettingsEnabled}"
										 Template="{StaticResource RibbonButtonWithGoodImgScalingTemplate}"
										 Click="SettingsCmdExecuted" />
					
					<ribbon:RibbonButton Name="rbtnLogWindow" 
										 Label="{Loc resLogWindow}"
										 LargeImageSource="RibbonIcons/CreateReport.png"
										 IsEnabled="{Binding LogWindowEnabled}"
										 Click="LogWindowCmdExecuted" />

					<ribbon:RibbonButton Name="rbtnShowRemoteControlWnd" 
										 Label="{Loc resShowRemoteControlWnd}"
										 LargeImageSource="RibbonIcons/if_teamviewer_100417.png"
										 Template="{StaticResource RibbonButtonWithGoodImgScalingTemplate}"
										 Click="ShowRemoteControlWndCmdExecuted" />

					<ribbon:RibbonButton Name="rbtnFalsestartRules" 
										 Label="{Loc resFalsestartRules}"
										 IsEnabled="{Binding FalsestartRulesEnabled}"
										 Click="FalsestartRulesCmdExecuted" />

					<ribbon:RibbonCheckBox Label="{Loc resGodsMode}"
										   IsChecked="{Binding GodsMode}"/>
				</ribbon:RibbonGroup> 
				
				<ribbon:RibbonGroup Header="{Loc resGrades}" IsEnabled="{Binding CalcGradesEnabled}">
					<ribbon:RibbonButton Label="{Loc resCalcGrades}"
										 Click="CalcGradesCmdExecuted" />
					
					<ribbon:RibbonMenuButton Name="mbtnHighlightGrades" ItemsSource="{Binding HighlightTypes}">
						<ribbon:RibbonMenuButton.Resources>
							<Style TargetType="{x:Type ribbon:RibbonMenuItem}">
								<Setter Property="Header"
										Value="{Binding Path=Value}" />
								<Setter Property="Command"
										Value="{Binding Path=Command}" />
							</Style>
						</ribbon:RibbonMenuButton.Resources>
					</ribbon:RibbonMenuButton>
				</ribbon:RibbonGroup> 
			</ribbon:RibbonTab>
		</ribbon:Ribbon>
		
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="auto" />
				<RowDefinition Height="auto" />
				<RowDefinition Height="auto" />
				<RowDefinition />
				<RowDefinition Height="auto" />
			</Grid.RowDefinitions>

			<Grid.ColumnDefinitions>
				<ColumnDefinition MinWidth="50"/>
			</Grid.ColumnDefinitions>

			<!-- Шапка -->
			<Grid Grid.Row="0"
				  Grid.Column="0"
				  Name="grdGroupHead">
				<Grid.Resources>
					<Style TargetType="Label">
						<Setter Property="FontFamily" Value="Arial" />
					</Style>
				</Grid.Resources>
				
				<Grid.RowDefinitions>
					<RowDefinition Height="auto" />
					<RowDefinition Height="auto" />
					<RowDefinition Height="auto" />
					<RowDefinition Height="auto" />
					<RowDefinition Height="auto" />
				</Grid.RowDefinitions>

				<Grid.ColumnDefinitions>
					<ColumnDefinition />
					<ColumnDefinition />
				</Grid.ColumnDefinitions>

				<Label Grid.Row="0"
					   Grid.Column="0"
					   Grid.ColumnSpan="10"
					   Name="lblCompName"
					   HorizontalAlignment="Center"
					   FontSize="20"
					   FontWeight="Bold" />
				<Label Grid.Row="1"
					   Grid.Column="0"
					   Name="lblLocation"
					   Content="{Loc resSmolensk}"
					   HorizontalAlignment="Left"
					   FontSize="14"/>
				<Label Grid.Row="1"
					   Grid.Column="1"
					   Name="lblRoundDate"
					   HorizontalAlignment="Right"
					   FontSize="14" />
				<Label Grid.Row="2"
					   Grid.Column="0"
					   Grid.ColumnSpan="10"
					   Name="lblRoundName"
					   HorizontalAlignment="Center"
					   FontSize="20" />
				
				<StackPanel Orientation="Horizontal"
							Grid.Row="3"
							Grid.Column="0"
							Grid.ColumnSpan="10">
					<StackPanel.Resources>
						<Style x:Key="Row6Style"
							   TargetType="Label"
							   BasedOn="{StaticResource {x:Type Label}}">
							<Style.Triggers>
								<DataTrigger Binding="{Binding Content, ElementName=lblRow6}" Value="{x:Null}">
									<Setter Property="Visibility" Value="Collapsed" />
								</DataTrigger>
							</Style.Triggers>
						</Style>
					</StackPanel.Resources>
					
					<Label Content="{Loc resMainJudge}"
						   Margin="0,0,0,0"
						   FontSize="14" />
					<Label Name="lblMainJudge"
						   Margin="0,0,10,0"
						   FontSize="14" />

					<Label Content="{Loc resMainSecretary}"
						   Margin="0,0,0,0"
						   FontSize="14" />
					<Label Name="lblMainSecretary"
						   Margin="0,0,10,0"
						   FontSize="14" />

					<Label Content="{Loc resRow6}"
						   FontSize="14"
						   Style="{StaticResource Row6Style}" />
					<Label Name="lblRow6"
						   Margin="0,0,0,0"
						   FontSize="14"
						   Style="{StaticResource Row6Style}" />
				</StackPanel>
			</Grid>

			<!-- Бегущая строка -->
			<!--<localctrls:CTicker x:Name="tckrMembersOnStart"
							 Grid.Row="1"
							 Height="30"
							 FontSize="20"
							 FontFamily="Arial Unicode MS"
							 BorderThickness="0,1,0,1"
							 BorderBrush="Black" />-->
			
			<!-- Дополнительный заголовок для итогового протокола -->
			<ScrollViewer Grid.Row="2"
						  Name="scrlvwrAdditionalDataGridHeader"
						  FontFamily="Arial"
						  FontSize="14"
						  VerticalScrollBarVisibility="Disabled"
						  HorizontalScrollBarVisibility="Hidden">
				<StackPanel Name="spAdditionalDataGridHeader" Orientation="Horizontal">
					<Label Name="lblLeftDummy" Margin="21,0,0,0" Padding="0" />
					<Label Name="lbRightDummy" Margin="0,0,17,0" Padding="0" />
				</StackPanel>
			</ScrollViewer>
				
			<Grid Grid.Row="3" Name="grdRoundMembersHost" SizeChanged="grdRoundMembersHost_SizeChanged">
				<Grid.ColumnDefinitions>
					<ColumnDefinition MinWidth="100"/>
					<ColumnDefinition Width="auto"/>
					<ColumnDefinition />
				</Grid.ColumnDefinitions>
				
				<DataGrid Grid.Column="0"
						  Name="dgrdRoundMembers"
						  ItemsSource="{Binding Source={StaticResource vsrcCurrentRoundMembers}}"
						  SelectionMode="Single"
						  AutoGenerateColumns="False"
						  EnableRowVirtualization="True"
						  VirtualizingStackPanel.VirtualizationMode="Standard"
						  VirtualizingStackPanel.IsVirtualizing="True"
						  CanUserReorderColumns="False"
						  CanUserResizeRows="False"
						  CanUserSortColumns="False"
						  CanUserAddRows="False"
						  CanUserDeleteRows="False"
						  RowHeaderWidth="1"
						  IsReadOnly="True"
						  ScrollViewer.CanContentScroll="True" 
						  ScrollViewer.VerticalScrollBarVisibility="Auto"
						  ScrollViewer.HorizontalScrollBarVisibility="Auto"
						  MinColumnWidth="2"
						  FontSize="14"
						  FontFamily="Arial"
						  ColumnHeaderHeight="30"
						  HorizontalGridLinesBrush="{Binding GridLinesFontStyle.BackgroundColor, Converter={gconvs:ColorToSolidBrushMarkupConverter}}"
						  VerticalGridLinesBrush="{Binding GridLinesFontStyle.BackgroundColor, Converter={gconvs:ColorToSolidBrushMarkupConverter}}"
						  ScrollViewer.ScrollChanged="dgrdRoundMembers_ScrollChanged"
						  SizeChanged="dgrdRoundMembers_SizeChanged">
				</DataGrid>
				
				<GridSplitter Grid.Column="1"
							  Width="5"
							  Name="grdspltrRoundMembers"
							  ResizeDirection="Columns"
							  HorizontalAlignment="Stretch"
							  VerticalAlignment="Stretch" />
			
				<!-- Дополнительный DataGrid, чтобы исключить прокрутку в большинстве случаев -->
				<DataGrid Grid.Column="2"
						  Name="dgrdRoundMembers2"
						  ItemsSource="{Binding Source={StaticResource vsrcCurrentRoundMembers2}}"
						  SelectionMode="Single"
						  AutoGenerateColumns="False"
						  EnableRowVirtualization="True"
						  VirtualizingStackPanel.VirtualizationMode="Standard"
						  VirtualizingStackPanel.IsVirtualizing="True"
						  CanUserReorderColumns="False"
						  CanUserResizeRows="False"
						  CanUserSortColumns="False"
						  CanUserAddRows="False"
						  CanUserDeleteRows="False"
						  RowHeaderWidth="1"
						  IsReadOnly="True"
						  ScrollViewer.CanContentScroll="True" 
						  ScrollViewer.VerticalScrollBarVisibility="Auto"
						  ScrollViewer.HorizontalScrollBarVisibility="Auto"
						  MinColumnWidth="2"
						  FontSize="14"
						  FontFamily="Arial"
						  ColumnHeaderHeight="30"
                          HorizontalGridLinesBrush="{Binding GridLinesFontStyle.BackgroundColor, Converter={gconvs:ColorToSolidBrushMarkupConverter}}"
						  VerticalGridLinesBrush="{Binding GridLinesFontStyle.BackgroundColor, Converter={gconvs:ColorToSolidBrushMarkupConverter}}"
						  SizeChanged="dgrdRoundMembers2_SizeChanged">
				</DataGrid>
			</Grid>
						
			<!-- Нижняя панель -->
			<rpnls:CRightPanelControl Grid.Row="4"
									 Grid.Column="0"
									 x:Name="RightPanel"
									 VerticalAlignment="Stretch"
									 HorizontalAlignment="Stretch" />
		</Grid>
	</DockPanel>
</glob:CNotifyPropertyChangedWnd>
