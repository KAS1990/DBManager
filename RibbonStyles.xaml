<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:vs317="clr-namespace:DBManager"
					xmlns:ribbon="clr-namespace:Microsoft.Windows.Controls.Ribbon;assembly=RibbonControlsLibrary"
					xmlns:classic="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Classic"
					xmlns:controls="clr-namespace:Microsoft.Windows.Controls;assembly=RibbonControlsLibrary"
					xmlns:shell="clr-namespace:Microsoft.Windows.Shell;assembly=Microsoft.Windows.Shell"
					xmlns:system="clr-namespace:System;assembly=mscorlib"
					xmlns:attachedprops="clr-namespace:DBManager.AttachedProperties">

	<ResourceDictionary.MergedDictionaries>
		<ResourceDictionary Source="/RibbonControlsLibrary;component/Themes/Generic.xaml" />
	</ResourceDictionary.MergedDictionaries>

	<!-- RibbonToolTip -->
	<system:Int32 x:Key="&#224;">900</system:Int32>
	<system:Int32 x:Key="&#225;">20000</system:Int32>
	<system:Int32 x:Key="&#226;">0</system:Int32>

	<!-- Стиль RibbonToggleButton для WithoutHeaderRibbonSplitButtonStyle -->
	<ControlTemplate x:Key="&#292;"
					 TargetType="{x:Type ribbon:RibbonToggleButton}">
		<Grid x:Name="MainGrid"
			  SnapsToDevicePixels="True">
			<Border x:Name="OuterBorder"
					CornerRadius="{TemplateBinding CornerRadius}"
					Background="{TemplateBinding Background}"
					BorderBrush="{TemplateBinding BorderBrush}"
					BorderThickness="{TemplateBinding BorderThickness}" />
			<Border x:Name="MiddleBorder"
					CornerRadius="{TemplateBinding CornerRadius}"
					Background="Transparent"
					BorderBrush="Transparent"
					BorderThickness="{TemplateBinding BorderThickness}">
				<Border x:Name="InnerBorder"
						Background="Transparent"
						BorderBrush="Transparent"
						BorderThickness="{TemplateBinding BorderThickness}"
						Padding="{TemplateBinding Padding}"
						CornerRadius="{TemplateBinding CornerRadius}">
					<StackPanel x:Name="StackPanel"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
						<StackPanel Orientation="Horizontal"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
							<Image x:Name="PART_LeftImage"
								   Source="{TemplateBinding SmallImageSource}"
								   Height="32"
								   Margin="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon}, ResourceId=LargeImageMargin}}"
								   RenderOptions.BitmapScalingMode="Fant"
								   VerticalAlignment="Center" />
							<Image x:Name="PART_Image"
								   Source="{TemplateBinding LargeImageSource}"
								   Height="32"
								   Margin="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon}, ResourceId=LargeImageMargin}}"
								   RenderOptions.BitmapScalingMode="Fant"
								   VerticalAlignment="Center" />
						</StackPanel>

						<Grid x:Name="Grid"
							  VerticalAlignment="Center"
							  HorizontalAlignment="Center">
							<ribbon:RibbonTwoLineText x:Name="TwoLineText"
													  Text="{TemplateBinding Label}"
													  TextAlignment="Center"
													  VerticalAlignment="Top"
													  HorizontalAlignment="Center"
													  LineHeight="13px"
													  LineStackingStrategy="BlockLineHeight"
													  HasTwoLines="{TemplateBinding ribbon:RibbonTwoLineText.HasTwoLines}"
													  PathData="{TemplateBinding ribbon:RibbonTwoLineText.PathData}"
													  PathFill="{TemplateBinding Foreground}"
													  Margin="1,1,1,0" />
						</Grid>
					</StackPanel>
				</Border>
			</Border>
		</Grid>
		<ControlTemplate.Triggers>

			<!-- Large Variant -->
			<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
						 Value="Large">
				<Setter Property="MinWidth"
						Value="44" />
				<Setter Property="Height"
						Value="auto" />
			</DataTrigger>

			<!-- Medium or Small Variant -->
			<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
						 Value="Small">
				<Setter Property="Height"
						Value="{StaticResource &#260;}" />
				<Setter TargetName="PART_Image"
						Property="Margin"
						Value="1,0,1,0" />
				<Setter TargetName="PART_Image"
						Property="Source"
						Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SmallImageSource}" />
				<Setter TargetName="PART_Image"
						Property="Width"
						Value="16" />
				<Setter TargetName="PART_Image"
						Property="Height"
						Value="16" />
				<Setter TargetName="TwoLineText"
						Property="HorizontalAlignment"
						Value="Left" />
				<Setter TargetName="TwoLineText"
						Property="Margin"
						Value="1" />
				<Setter TargetName="StackPanel"
						Property="Orientation"
						Value="Horizontal" />
			</DataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
							   Value="Small" />
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInQuickAccessToolBar}"
							   Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter Property="Height"
						Value="Auto" />
			</MultiDataTrigger>

			<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
						 Value="False">
				<Setter TargetName="TwoLineText"
						Property="Text"
						Value="{x:Null}" />
				<Setter TargetName="TwoLineText"
						Property="Margin"
						Value="0" />
			</DataTrigger>

			<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
						 Value="Collapsed">
				<Setter TargetName="PART_Image"
						Property="Visibility"
						Value="Collapsed" />
			</DataTrigger>

			<!-- IsMouseOver -->
			<Trigger Property="IsMouseOver"
					 Value="True">
				<Setter TargetName="OuterBorder"
						Property="Background"
						Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
				<Setter TargetName="OuterBorder"
						Property="BorderBrush"
						Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
				<Setter TargetName="InnerBorder"
						Property="BorderBrush"
						Value="{StaticResource &#227;}" />
			</Trigger>

			<!-- IsFocused -->
			<Trigger Property="IsKeyboardFocused"
					 Value="True">
				<Setter TargetName="OuterBorder"
						Property="Background"
						Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}" />
				<Setter TargetName="OuterBorder"
						Property="BorderBrush"
						Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}" />
				<Setter TargetName="InnerBorder"
						Property="BorderBrush"
						Value="{StaticResource &#227;}" />
			</Trigger>

			<!-- IsEnabled -->
			<Trigger Property="IsEnabled"
					 Value="False">
				<Setter TargetName="PART_Image"
						Property="Opacity"
						Value="0.5" />
				<Setter TargetName="MainGrid"
						Property="TextElement.Foreground"
						Value="{StaticResource &#203;}" />
				<Setter TargetName="TwoLineText"
						Property="PathFill"
						Value="{StaticResource &#203;}" />
			</Trigger>

			<!-- IsChecked -->
			<Trigger Property="IsChecked"
					 Value="True">
				<Setter TargetName="OuterBorder"
						Property="Background"
						Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}" />
				<Setter TargetName="OuterBorder"
						Property="BorderBrush"
						Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
				<Setter TargetName="InnerBorder"
						Property="BorderBrush"
						Value="{StaticResource &#256;}" />
			</Trigger>

			<!-- IsPressed -->
			<Trigger Property="IsPressed"
					 Value="True">
				<Setter TargetName="OuterBorder"
						Property="Background"
						Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
				<Setter TargetName="OuterBorder"
						Property="BorderBrush"
						Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
				<Setter TargetName="InnerBorder"
						Property="BorderBrush"
						Value="Transparent" />
			</Trigger>

			<!-- (IsMouseOver || IsKeyboardFocused) && (IsChecked || IsPressed) -->
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsChecked"
							   Value="True" />
					<Condition Property="IsMouseOver"
							   Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="MiddleBorder"
						Property="Background"
						Value="{StaticResource &#269;}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsChecked"
							   Value="True" />
					<Condition Property="IsKeyboardFocused"
							   Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="MiddleBorder"
						Property="Background"
						Value="{StaticResource &#269;}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsPressed"
							   Value="True" />
					<Condition Property="IsKeyboardFocused"
							   Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="MiddleBorder"
						Property="Background"
						Value="{StaticResource &#269;}" />
			</MultiTrigger>

			<!-- IsInControlGroup -->
			<Trigger Property="IsInControlGroup"
					 Value="True">
				<Setter TargetName="OuterBorder"
						Property="BorderBrush"
						Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}" />
				<Setter TargetName="OuterBorder"
						Property="BorderThickness"
						Value="0,0,1,0" />
				<Setter TargetName="OuterBorder"
						Property="CornerRadius"
						Value="0" />
				<Setter TargetName="InnerBorder"
						Property="CornerRadius"
						Value="0" />
			</Trigger>

			<!-- HighContrast -->
			<DataTrigger Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
						 Value="True">
				<Setter TargetName="MainGrid"
						Property="TextElement.Foreground"
						Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
				<Setter TargetName="TwoLineText"
						Property="PathFill"
						Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
				<Setter TargetName="OuterBorder"
						Property="CornerRadius"
						Value="0" />
				<Setter TargetName="OuterBorder"
						Property="Background"
						Value="Transparent" />
				<Setter TargetName="OuterBorder"
						Property="BorderBrush"
						Value="Transparent" />
			</DataTrigger>

			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}"
							   Value="True" />
					<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
							   Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter TargetName="OuterBorder"
						Property="Background"
						Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
				<Setter TargetName="OuterBorder"
						Property="BorderBrush"
						Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
				<Setter TargetName="InnerBorder"
						Property="BorderBrush"
						Value="Transparent" />
				<Setter TargetName="MiddleBorder"
						Property="Background"
						Value="Transparent" />
				<Setter TargetName="MainGrid"
						Property="TextElement.Foreground"
						Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
				<Setter TargetName="TwoLineText"
						Property="PathFill"
						Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
			</MultiDataTrigger>

			<!-- In the scenario where this control is part of RibbonSplitButton's or some other control's template,
				 we need to handle TemplatedParent's IsMouseOver state similarly to how we handle our own IsMouseOver state. -->
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}"
							   Value="True" />
					<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
							   Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter TargetName="OuterBorder"
						Property="BorderBrush"
						Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
				<Setter TargetName="MainGrid"
						Property="TextElement.Foreground"
						Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
				<Setter TargetName="TwoLineText"
						Property="PathFill"
						Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}"
							   Value="True" />
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}"
							   Value="False" />
					<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
							   Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter TargetName="OuterBorder"
						Property="BorderBrush"
						Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}"
							   Value="True" />
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}"
							   Value="True" />
					<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
							   Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter TargetName="OuterBorder"
						Property="BorderBrush"
						Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsChecked}"
							   Value="True" />
					<Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}"
							   Value="False" />
					<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
							   Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter TargetName="OuterBorder"
						Property="BorderBrush"
						Value="Transparent" />
				<Setter TargetName="OuterBorder"
						Property="Background"
						Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
				<Setter TargetName="MainGrid"
						Property="TextElement.Foreground"
						Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
				<Setter TargetName="TwoLineText"
						Property="PathFill"
						Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
			</MultiDataTrigger>

			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}"
							   Value="True" />
					<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
							   Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter TargetName="OuterBorder"
						Property="Background"
						Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
				<Setter TargetName="OuterBorder"
						Property="BorderBrush"
						Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
				<Setter TargetName="InnerBorder"
						Property="BorderBrush"
						Value="Transparent" />
				<Setter TargetName="MainGrid"
						Property="TextElement.Foreground"
						Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
				<Setter TargetName="TwoLineText"
						Property="PathFill"
						Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
			</MultiDataTrigger>

			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}"
							   Value="True" />
					<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
							   Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter TargetName="OuterBorder"
						Property="Background"
						Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
				<Setter TargetName="OuterBorder"
						Property="BorderBrush"
						Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
				<Setter TargetName="InnerBorder"
						Property="BorderBrush"
						Value="Transparent" />
				<Setter TargetName="MainGrid"
						Property="TextElement.Foreground"
						Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
				<Setter TargetName="TwoLineText"
						Property="PathFill"
						Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
			</MultiDataTrigger>

			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}"
							   Value="True" />
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}"
							   Value="True" />
					<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
							   Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter TargetName="OuterBorder"
						Property="BorderBrush"
						Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
			</MultiDataTrigger>

			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}"
							   Value="True" />
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}"
							   Value="True" />
					<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
							   Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter TargetName="OuterBorder"
						Property="BorderBrush"
						Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
			</MultiDataTrigger>

			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}"
							   Value="True" />
					<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
							   Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter TargetName="OuterBorder"
						Property="Background"
						Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
				<Setter TargetName="OuterBorder"
						Property="BorderBrush"
						Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
				<Setter TargetName="MiddleBorder"
						Property="Background"
						Value="Transparent" />
				<Setter TargetName="MainGrid"
						Property="TextElement.Foreground"
						Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
				<Setter TargetName="TwoLineText"
						Property="PathFill"
						Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
			</MultiDataTrigger>

			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInControlGroup}"
							   Value="True" />
					<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
							   Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter TargetName="OuterBorder"
						Property="BorderBrush"
						Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
			</MultiDataTrigger>

			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}"
							   Value="False" />
					<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
							   Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter TargetName="MainGrid"
						Property="TextElement.Foreground"
						Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
				<Setter TargetName="TwoLineText"
						Property="PathFill"
						Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
			</MultiDataTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- Шаблон для кнопки RibbonButton, которая находится в выпадающей панели с тестами -->
	<Style x:Key="RibbonTestTypeButtonStyle"
		   TargetType="{x:Type ribbon:RibbonButton}">
		<Setter Property="MinWidth"
				Value="44" />
		<Setter Property="MinHeight"
				Value="100" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ribbon:RibbonButton}">
					<Border x:Name="OuterBorder"
							CornerRadius="{TemplateBinding CornerRadius}"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="True">
						<Border x:Name="InnerBorder"
								BorderBrush="Transparent"
								BorderThickness="{TemplateBinding BorderThickness}"
								Padding="{TemplateBinding Padding}"
								CornerRadius="{TemplateBinding CornerRadius}">
							<StackPanel x:Name="StackPanel">
								<Image x:Name="PART_Image"
									   Source="{TemplateBinding LargeImageSource}"
									   Width="{TemplateBinding attachedprops:RibbonImageResizeAttachedProps.ImageWidth}"
									   Height="{TemplateBinding attachedprops:RibbonImageResizeAttachedProps.ImageHeight}"
									   Margin="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon}, ResourceId=LargeImageMargin}}"
									   RenderOptions.BitmapScalingMode="Fant"
									   VerticalAlignment="Center"
									   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
								<Grid x:Name="Grid"
									  VerticalAlignment="Center"
									  HorizontalAlignment="Center">
									<ribbon:RibbonTwoLineText x:Name="TwoLineText"
															  Text="{TemplateBinding Label}"
															  HasTwoLines="True"
															  TextAlignment="Center"
															  VerticalAlignment="Top"
															  HorizontalAlignment="Center"
															  LineHeight="13px"
															  LineStackingStrategy="BlockLineHeight"
															  Margin="1,1,1,0" />
								</Grid>
							</StackPanel>
						</Border>
					</Border>

					<ControlTemplate.Triggers>
						<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
									 Value="False">
							<Setter TargetName="TwoLineText"
									Property="Visibility"
									Value="Collapsed" />
						</DataTrigger>

						<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
									 Value="Collapsed">
							<Setter TargetName="PART_Image"
									Property="Visibility"
									Value="Collapsed" />
						</DataTrigger>

						<!-- IsMouseOver -->
						<Trigger Property="IsMouseOver"
								 Value="True">
							<Setter TargetName="OuterBorder"
									Property="Background"
									Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
							<Setter TargetName="OuterBorder"
									Property="BorderBrush"
									Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
							<Setter TargetName="InnerBorder"
									Property="BorderBrush"
									Value="{StaticResource &#227;}" />
						</Trigger>

						<!-- IsFocused -->
						<Trigger Property="IsKeyboardFocused"
								 Value="True">
							<Setter TargetName="OuterBorder"
									Property="Background"
									Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}" />
							<Setter TargetName="OuterBorder"
									Property="BorderBrush"
									Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}" />
							<Setter TargetName="InnerBorder"
									Property="BorderBrush"
									Value="{StaticResource &#227;}" />
						</Trigger>

						<!-- IsPressed -->
						<Trigger Property="IsPressed"
								 Value="True">
							<Setter TargetName="OuterBorder"
									Property="Background"
									Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
							<Setter TargetName="OuterBorder"
									Property="BorderBrush"
									Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
							<Setter TargetName="InnerBorder"
									Property="BorderBrush"
									Value="Transparent" />
						</Trigger>

						<!-- IsInControlGroup -->
						<Trigger Property="IsInControlGroup"
								 Value="True">
							<Setter TargetName="OuterBorder"
									Property="BorderBrush"
									Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}" />
							<Setter TargetName="OuterBorder"
									Property="BorderThickness"
									Value="0,0,1,0" />
							<Setter TargetName="OuterBorder"
									Property="CornerRadius"
									Value="0" />
							<Setter TargetName="InnerBorder"
									Property="CornerRadius"
									Value="0" />
						</Trigger>

						<!-- IsEnabled -->
						<Trigger Property="IsEnabled"
								 Value="False">
							<Setter TargetName="PART_Image"
									Property="Opacity"
									Value="0.5" />
							<Setter TargetName="OuterBorder"
									Property="TextElement.Foreground"
									Value="{StaticResource &#203;}" />
						</Trigger>

						<!-- Override potential app-level brushes in HighContrast. -->
						<DataTrigger Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
									 Value="True">
							<Setter TargetName="OuterBorder"
									Property="TextElement.Foreground"
									Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
							<Setter TargetName="OuterBorder"
									Property="Background"
									Value="Transparent" />
							<Setter TargetName="OuterBorder"
									Property="BorderBrush"
									Value="Transparent" />
							<Setter TargetName="OuterBorder"
									Property="CornerRadius"
									Value="0" />
						</DataTrigger>

						<!-- In the scenario where this control is part of RibbonSplitButton's or some other control's template,
							 we need to handle TemplatedParent's IsMouseOver state similarly to how we handle our own IsMouseOver state. -->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}"
										   Value="True" />
								<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
										   Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="OuterBorder"
									Property="BorderBrush"
									Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}"
										   Value="True" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}"
										   Value="False" />
								<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
										   Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="OuterBorder"
									Property="BorderBrush"
									Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen}"
										   Value="True" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}"
										   Value="False" />
								<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
										   Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="OuterBorder"
									Property="BorderBrush"
									Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
						</MultiDataTrigger>

						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}"
										   Value="True" />
								<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
										   Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="OuterBorder"
									Property="Background"
									Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
							<Setter TargetName="OuterBorder"
									Property="BorderBrush"
									Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
							<Setter TargetName="OuterBorder"
									Property="CornerRadius"
									Value="0" />
							<Setter TargetName="InnerBorder"
									Property="BorderBrush"
									Value="Transparent" />
							<Setter TargetName="OuterBorder"
									Property="TextElement.Foreground"
									Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
						</MultiDataTrigger>

						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}"
										   Value="True" />
								<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
										   Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="OuterBorder"
									Property="Background"
									Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
							<Setter TargetName="OuterBorder"
									Property="BorderBrush"
									Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
							<Setter TargetName="OuterBorder"
									Property="CornerRadius"
									Value="0" />
							<Setter TargetName="InnerBorder"
									Property="BorderBrush"
									Value="Transparent" />
							<Setter TargetName="OuterBorder"
									Property="TextElement.Foreground"
									Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
						</MultiDataTrigger>

						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}"
										   Value="True" />
								<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
										   Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="OuterBorder"
									Property="Background"
									Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
							<Setter TargetName="OuterBorder"
									Property="BorderBrush"
									Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
							<Setter TargetName="OuterBorder"
									Property="CornerRadius"
									Value="0" />
							<Setter TargetName="OuterBorder"
									Property="TextElement.Foreground"
									Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
						</MultiDataTrigger>

						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInControlGroup}"
										   Value="True" />
								<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
										   Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="OuterBorder"
									Property="BorderBrush"
									Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
						</MultiDataTrigger>

						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}"
										   Value="False" />
								<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
										   Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="OuterBorder"
									Property="TextElement.Foreground"
									Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Стиль кнопки RibbonSplitButton, у которой есть единая кнопка открытия всплывающего окна -->
	<Style x:Key="WithoutHeaderRibbonSplitButtonStyle"
		   TargetType="{x:Type ribbon:RibbonSplitButton}">
		<Style.Resources>
			<Style x:Key="{x:Static MenuItem.SeparatorStyleKey}"
				   TargetType="{x:Type ribbon:RibbonSeparator}">
				<Setter Property="OverridesDefaultStyle"
						Value="True" />
				<Setter Property="Focusable"
						Value="false" />
				<Setter Property="BorderBrush"
						Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonMenuButton}}, Path=Ribbon.BorderBrush}" />
				<Setter Property="Background"
						Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonMenuButton}}, Path=Ribbon.Background}" />
				<Setter Property="FontWeight"
						Value="Bold" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ribbon:RibbonSeparator}">
							<Border x:Name="MainBorder"
									BorderThickness="0,1,0,1"
									BorderBrush="{TemplateBinding BorderBrush}"
									Background="{TemplateBinding Background}">
								<Border x:Name="Overlay"
										Background="{StaticResource &#228;}">
									<TextBlock x:Name="Text"
											   Margin="2,1,2,1"
											   Text="{TemplateBinding Label}" />
								</Border>
							</Border>
							<ControlTemplate.Triggers>
								<DataTrigger Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
											 Value="True">
									<Setter TargetName="Text"
											Property="Foreground"
											Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
									<Setter TargetName="Overlay"
											Property="Background"
											Value="Transparent" />
									<Setter TargetName="MainBorder"
											Property="BorderBrush"
											Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
									<Setter TargetName="MainBorder"
											Property="Background"
											Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
								</DataTrigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Style.Triggers>
					<Trigger Property="Label"
							 Value="{x:Null}">
						<Setter Property="Template">
							<Setter.Value>
								<ControlTemplate TargetType="{x:Type ribbon:RibbonSeparator}">
									<Grid x:Name="Grid"
										  SnapsToDevicePixels="True"
										  Margin="1">
										<Grid.ColumnDefinitions>
											<ColumnDefinition MinWidth="22"
															  Width="Auto"
															  SharedSizeGroup="MenuItemIconColumnGroup" />
											<ColumnDefinition Width="*" />
											<ColumnDefinition Width="14" />
										</Grid.ColumnDefinitions>

										<Border x:Name="SideBarBorder"
												BorderThickness="0,0,1,0"
												Margin="0,-1,0,-1"
												Background="{TemplateBinding Background}"
												BorderBrush="{TemplateBinding BorderBrush}">
											<Border x:Name="SideBarOverlay"
													Background="{StaticResource &#228;}">
											</Border>
										</Border>
										<Line x:Name="Line"
											  Grid.Column="1"
											  Grid.ColumnSpan="2"
											  Margin="2,0,0,0"
											  X1="0"
											  Y1="0"
											  X2="1"
											  Y2="0"
											  Stroke="{TemplateBinding BorderBrush}"
											  StrokeThickness="1"
											  Stretch="Fill" />
									</Grid>

									<ControlTemplate.Triggers>
										<DataTrigger Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
													 Value="True">
											<Setter TargetName="SideBarBorder"
													Property="Background"
													Value="Transparent" />
											<Setter TargetName="SideBarBorder"
													Property="BorderBrush"
													Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
											<Setter TargetName="SideBarOverlay"
													Property="Background"
													Value="Transparent" />
											<Setter TargetName="Line"
													Property="Stroke"
													Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
										</DataTrigger>
									</ControlTemplate.Triggers>
								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</Trigger>
				</Style.Triggers>
			</Style>
		</Style.Resources>
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="BorderBrush"
				Value="Transparent" />
		<Setter Property="BorderThickness"
				Value="1" />
		<Setter Property="FocusVisualStyle"
				Value="{x:Null}" />
		<Setter Property="HorizontalContentAlignment"
				Value="Center" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Setter Property="Padding"
				Value="2,0,2,0" />
		<Setter Property="MouseOverBorderBrush"
				Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.MouseOverBorderBrush}" />
		<Setter Property="MouseOverBackground"
				Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.MouseOverBackground}" />
		<Setter Property="PressedBorderBrush"
				Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.PressedBorderBrush}" />
		<Setter Property="PressedBackground"
				Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.PressedBackground}" />
		<Setter Property="CheckedBorderBrush"
				Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.CheckedBorderBrush}" />
		<Setter Property="CheckedBackground"
				Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.CheckedBackground}" />
		<Setter Property="FocusedBorderBrush"
				Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.FocusedBorderBrush}" />
		<Setter Property="FocusedBackground"
				Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.FocusedBackground}" />
		<Setter Property="ToolTipService.InitialShowDelay"
				Value="{StaticResource &#224;}" />
		<Setter Property="ToolTipService.ShowDuration"
				Value="{StaticResource &#225;}" />
		<Setter Property="ToolTipService.BetweenShowDelay"
				Value="{StaticResource &#226;}" />
		<Setter Property="ToolTipService.IsEnabled"
				Value="false" />
		<Setter Property="QuickAccessToolBarControlSizeDefinition">
			<Setter.Value>
				<ribbon:RibbonControlSizeDefinition ImageSize="Small"
													IsLabelVisible="False" />
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ribbon:RibbonSplitButton}">
					<Grid x:Name="MainGrid"
						  SnapsToDevicePixels="True">
						<Border x:Name="UnderlayBorder"
								Opacity="0.5"
								Visibility="Collapsed"
								Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
						<Label x:Name="PART_HeaderButton"
							   Visibility="Collapsed" />
						<!-- Please note that the setter for the Style property is only so that this ToggleButton doesn't accidentally pick up some styles defined at the app level. -->
						<ribbon:RibbonToggleButton x:Name="PART_ToggleButton"
												   Label="{TemplateBinding Label}"
												   LargeImageSource="{TemplateBinding LargeImageSource}"
												   SmallImageSource="{TemplateBinding SmallImageSource}"
												   Style="{x:Null}"
												   Template="{StaticResource &#292;}"
												   ribbon:RibbonTwoLineText.PathData="{StaticResource &#255;}"
												   BorderBrush="{TemplateBinding BorderBrush}"
												   Background="Transparent"
												   CornerRadius="2,2,2,2"
												   FocusVisualStyle="{x:Null}"
												   MouseOverBorderBrush="{TemplateBinding MouseOverBorderBrush}"
												   MouseOverBackground="{TemplateBinding MouseOverBackground}"
												   PressedBorderBrush="{TemplateBinding PressedBorderBrush}"
												   PressedBackground="{TemplateBinding PressedBackground}"
												   CheckedBorderBrush="{TemplateBinding CheckedBorderBrush}"
												   CheckedBackground="{TemplateBinding CheckedBackground}"
												   FocusedBorderBrush="{TemplateBinding FocusedBorderBrush}"
												   FocusedBackground="{TemplateBinding FocusedBackground}"
												   HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
												   VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
												   Padding="{TemplateBinding Padding}"
												   ToolTipTitle="{TemplateBinding DropDownToolTipTitle}"
												   ToolTipDescription="{TemplateBinding DropDownToolTipDescription}"
												   ToolTipImageSource="{TemplateBinding DropDownToolTipImageSource}"
												   ToolTipFooterTitle="{TemplateBinding DropDownToolTipFooterTitle}"
												   ToolTipFooterDescription="{TemplateBinding DropDownToolTipFooterDescription}"
												   ToolTipFooterImageSource="{TemplateBinding DropDownToolTipFooterImageSource}"
												   ClickMode="Press"
												   IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay}"
												   ToolTipService.InitialShowDelay="{StaticResource &#224;}"
												   ToolTipService.ShowDuration="{StaticResource &#225;}"
												   ToolTipService.BetweenShowDelay="{StaticResource &#226;}">
							<ribbon:RibbonToggleButton.ControlSizeDefinition>
								<ribbon:RibbonControlSizeDefinition ImageSize="Collapsed"
																	IsLabelVisible="False" />
							</ribbon:RibbonToggleButton.ControlSizeDefinition>
						</ribbon:RibbonToggleButton>

						<Popup x:Name="PART_Popup"
							   HorizontalOffset="1"
							   VerticalOffset="-1"
							   AllowsTransparency="True"
							   Placement="Bottom"
							   IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen}"
							   Focusable="False"
							   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
							<classic:SystemDropShadowChrome Name="Shadow"
															Color="Transparent"
															controls:KeyTipService.IsKeyTipScope="True"
															RenderOptions.ClearTypeHint="Enabled">
								<Border Name="MenuBorder"
										BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
										Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
										BorderThickness="{TemplateBinding BorderThickness}"
										CornerRadius="2">
									<Border x:Name="SubMenuInnerBorder"
											Background="{StaticResource &#239;}"
											BorderThickness="0"
											CornerRadius="2">
										<Grid>
											<Grid.RowDefinitions>
												<RowDefinition Height="Auto" />
												<RowDefinition />
												<RowDefinition Height="Auto" />
											</Grid.RowDefinitions>
											<ScrollViewer x:Name="PART_SubMenuScrollViewer"
														  Grid.Row="1"
														  Margin="1"
														  Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
												<Grid RenderOptions.ClearTypeHint="Enabled">
													<Canvas x:Name="BackgroundCanvas"
															Height="0"
															Width="0"
															HorizontalAlignment="Left"
															VerticalAlignment="Top">
														<Rectangle x:Name="OpaqueRect"
																   Height="{Binding ElementName=MenuBorder,Path=ActualHeight}"
																   Width="{Binding ElementName=MenuBorder,Path=ActualWidth}"
																   Fill="{Binding ElementName=MenuBorder,Path=Background}"
																   RadiusX="2"
																   RadiusY="2" />
														<Rectangle x:Name="OverlayRect"
																   Height="{Binding ElementName=SubMenuInnerBorder,Path=ActualHeight}"
																   Width="{Binding ElementName=SubMenuInnerBorder,Path=ActualWidth}"
																   Fill="{Binding ElementName=SubMenuInnerBorder,Path=Background}"
																   RadiusX="2"
																   RadiusY="2" />
													</Canvas>

													<ItemsPresenter x:Name="ItemsPresenter"
																	KeyboardNavigation.TabNavigation="Cycle"
																	KeyboardNavigation.DirectionalNavigation="Cycle"
																	Grid.IsSharedSizeScope="True" />

												</Grid>

											</ScrollViewer>
											<Border Name="ResizeControl"
													Grid.Row="2"
													Visibility="Collapsed"
													Background="{StaticResource &#230;}"
													BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
													BorderThickness="0,1,0,0">
												<Thumb x:Name="PART_ResizeThumb"
													   Style="{StaticResource &#231;}" />
											</Border>
										</Grid>
									</Border>
								</Border>
							</classic:SystemDropShadowChrome>
						</Popup>
					</Grid>
					<ControlTemplate.Triggers>

						<Trigger SourceName="PART_SubMenuScrollViewer"
								 Property="ScrollViewer.CanContentScroll"
								 Value="false">
							<Setter TargetName="OpaqueRect"
									Property="Canvas.Top"
									Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
							<Setter TargetName="OpaqueRect"
									Property="Canvas.Left"
									Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
							<Setter TargetName="OverlayRect"
									Property="Canvas.Top"
									Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
							<Setter TargetName="OverlayRect"
									Property="Canvas.Left"
									Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
						</Trigger>

						<Trigger Property="IsDropDownOpen"
								 Value="True">
							<Setter TargetName="PART_ToggleButton"
									Property="ToolTipService.IsEnabled"
									Value="False" />
						</Trigger>
						<Trigger Property="HasGallery"
								 Value="True">
							<Setter TargetName="PART_SubMenuScrollViewer"
									Property="HorizontalScrollBarVisibility"
									Value="Disabled" />
							<Setter TargetName="PART_SubMenuScrollViewer"
									Property="VerticalScrollBarVisibility"
									Value="Disabled" />
						</Trigger>

						<!-- Large Variant -->
						<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
									 Value="Large">
							<Setter Property="MinWidth"
									Value="44" />
							<Setter TargetName="PART_ToggleButton"
									Property="ribbon:RibbonTwoLineText.HasTwoLines"
									Value="true" />
							<Setter TargetName="PART_ToggleButton"
									Property="CornerRadius"
									Value="2,2,2,2" />
						</DataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
										   Value="Large" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
										   Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="PART_ToggleButton"
									Property="ControlSizeDefinition">
								<Setter.Value>
									<ribbon:RibbonControlSizeDefinition ImageSize="Large"
																		IsLabelVisible="True" />
								</Setter.Value>
							</Setter>
						</MultiDataTrigger>

						<!--Small or Medium variant-->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
										   Value="Small" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
										   Value="False" />
							</MultiDataTrigger.Conditions>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
										   Value="Small" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
										   Value="True" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=LabelPosition}"
										   Value="DropDown" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="PART_ToggleButton"
									Property="ControlSizeDefinition">
								<Setter.Value>
									<ribbon:RibbonControlSizeDefinition ImageSize="Collapsed"
																		IsLabelVisible="True" />
								</Setter.Value>
							</Setter>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
										   Value="Small" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
										   Value="True" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=LabelPosition}"
										   Value="Header" />
							</MultiDataTrigger.Conditions>
						</MultiDataTrigger>
						<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInQuickAccessToolBar}"
									 Value="True">
							<Setter TargetName="PART_ToggleButton"
									Property="Height"
									Value="Auto" />
						</DataTrigger>

						<!--Collapsed Variant-->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
										   Value="Collapsed" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
										   Value="False" />
							</MultiDataTrigger.Conditions>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
										   Value="Collapsed" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
										   Value="True" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=LabelPosition}"
										   Value="DropDown" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="PART_ToggleButton"
									Property="ControlSizeDefinition">
								<Setter.Value>
									<ribbon:RibbonControlSizeDefinition ImageSize="Collapsed"
																		IsLabelVisible="True" />
								</Setter.Value>
							</Setter>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
										   Value="Collapsed" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
										   Value="True" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=LabelPosition}"
										   Value="Header" />
							</MultiDataTrigger.Conditions>
						</MultiDataTrigger>

						<!-- IsMouseOver -->

						<!-- IsFocused -->

						<!-- IsChecked -->
						<Trigger Property="IsChecked"
								 Value="True">
							<Setter TargetName="PART_ToggleButton"
									Property="BorderBrush"
									Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
						</Trigger>

						<!-- IsInControlGroup -->
						<Trigger Property="IsInControlGroup"
								 Value="True">
							<Setter TargetName="PART_ToggleButton"
									Property="CornerRadius"
									Value="0" />
						</Trigger>

						<!-- DropDown Triggers-->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="CanUserResizeHorizontally"
										   Value="true" />
								<Condition Property="CanUserResizeVertically"
										   Value="true" />
							</MultiTrigger.Conditions>
							<Setter TargetName="ResizeControl"
									Property="Visibility"
									Value="Visible" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="CanUserResizeHorizontally"
										   Value="false" />
								<Condition Property="CanUserResizeVertically"
										   Value="true" />
							</MultiTrigger.Conditions>
							<Setter TargetName="ResizeControl"
									Property="Visibility"
									Value="Visible" />
							<Setter TargetName="PART_ResizeThumb"
									Property="Style"
									Value="{StaticResource &#232;}" />
						</MultiTrigger>
						<Trigger Property="IsDropDownPositionedAbove"
								 Value="true">
							<Setter TargetName="ResizeControl"
									Property="Grid.Row"
									Value="0" />
							<Setter TargetName="ResizeControl"
									Property="BorderThickness"
									Value="0,0,0,1" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsDropDownPositionedAbove"
										   Value="true" />
								<Condition Property="CanUserResizeHorizontally"
										   Value="true" />
								<Condition Property="CanUserResizeVertically"
										   Value="true" />
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_ResizeThumb"
									Property="Style"
									Value="{StaticResource &#233;}" />
						</MultiTrigger>
						<Trigger SourceName="PART_Popup"
								 Property="Popup.HasDropShadow"
								 Value="True">
							<Setter TargetName="Shadow"
									Property="Margin"
									Value="0,0,5,5" />
							<Setter TargetName="Shadow"
									Property="Color"
									Value="{StaticResource &#213;}" />
						</Trigger>
						<Trigger SourceName="PART_Popup"
								 Property="Popup.IsOpen"
								 Value="False">
							<Setter TargetName="PART_Popup"
									Property="PopupAnimation"
									Value="None" />
						</Trigger>

						<Trigger Property="IsMouseOver"
								 Value="True">
							<Setter TargetName="UnderlayBorder"
									Property="Visibility"
									Value="Visible" />
							<Setter TargetName="PART_ToggleButton"
									Property="BorderBrush"
									Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
						</Trigger>

						<Trigger Property="IsEnabled"
								 Value="False">
							<Setter TargetName="MainGrid"
									Property="TextElement.Foreground"
									Value="{StaticResource &#203;}" />
						</Trigger>

						<!-- HighContrast -->
						<DataTrigger Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
									 Value="True">

							<Setter TargetName="BackgroundCanvas"
									Property="Visibility"
									Value="Collapsed" />

							<Setter TargetName="MainGrid"
									Property="TextElement.Foreground"
									Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
							<Setter TargetName="Shadow"
									Property="Color"
									Value="Transparent" />
							<Setter TargetName="PART_Popup"
									Property="PopupAnimation"
									Value="None" />
							<Setter TargetName="MenuBorder"
									Property="BorderBrush"
									Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
							<Setter TargetName="MenuBorder"
									Property="Background"
									Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
							<Setter TargetName="SubMenuInnerBorder"
									Property="Background"
									Value="Transparent" />
							<Setter TargetName="ResizeControl"
									Property="BorderBrush"
									Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
							<Setter TargetName="ResizeControl"
									Property="Background"
									Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
							<Setter TargetName="PART_ToggleButton"
									Property="CornerRadius"
									Value="0" />
							<Setter TargetName="UnderlayBorder"
									Property="Opacity"
									Value="0" />
						</DataTrigger>

						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}"
										   Value="True" />
								<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
										   Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="UnderlayBorder"
									Property="Opacity"
									Value="1" />
							<Setter TargetName="UnderlayBorder"
									Property="Background"
									Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
						</MultiDataTrigger>

						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}"
										   Value="True" />
								<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
										   Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="PART_ToggleButton"
									Property="BorderBrush"
									Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}"
										   Value="True" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}"
										   Value="True" />
								<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
										   Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="PART_ToggleButton"
									Property="BorderBrush"
									Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
						</MultiDataTrigger>

						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding ElementName=PART_ToggleButton, Path=IsKeyboardFocused}"
										   Value="True" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}"
										   Value="True" />
								<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
										   Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="PART_ToggleButton"
									Property="BorderBrush"
									Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
						</MultiDataTrigger>

						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}"
										   Value="False" />
								<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
										   Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="MainGrid"
									Property="TextElement.Foreground"
									Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<!-- Header is a RibbonToggleButton -->
			<Trigger Property="IsCheckable"
					 Value="True">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ribbon:RibbonSplitButton}">
							<Grid x:Name="MainGrid"
								  SnapsToDevicePixels="True">
								<Border x:Name="UnderlayBorder"
										Opacity="0.5"
										Visibility="Collapsed"
										Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
								<Label x:Name="PART_HeaderButton"
									   Visibility="Collapsed" />
								<!-- Please note that the setter for the Style property is only so that this ToggleButton doesn't accidentally pick up some styles defined at the app level. -->
								<ribbon:RibbonToggleButton x:Name="PART_ToggleButton"
														   Style="{x:Null}"
														   Template="{StaticResource &#292;}"
														   Label="{TemplateBinding Label}"
														   LargeImageSource="{TemplateBinding LargeImageSource}"
														   SmallImageSource="{TemplateBinding SmallImageSource}"
														   ribbon:RibbonTwoLineText.PathData="{StaticResource &#255;}"
														   BorderBrush="{TemplateBinding BorderBrush}"
														   BorderThickness="1"
														   Background="Transparent"
														   CornerRadius="2,2,2,2"
														   FocusVisualStyle="{x:Null}"
														   MouseOverBorderBrush="{TemplateBinding MouseOverBorderBrush}"
														   MouseOverBackground="{TemplateBinding MouseOverBackground}"
														   PressedBorderBrush="{TemplateBinding PressedBorderBrush}"
														   PressedBackground="{TemplateBinding PressedBackground}"
														   CheckedBorderBrush="{TemplateBinding CheckedBorderBrush}"
														   CheckedBackground="{TemplateBinding CheckedBackground}"
														   FocusedBorderBrush="{TemplateBinding FocusedBorderBrush}"
														   FocusedBackground="{TemplateBinding FocusedBackground}"
														   HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
														   VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
														   Padding="{TemplateBinding Padding}"
														   ToolTipTitle="{TemplateBinding DropDownToolTipTitle}"
														   ToolTipDescription="{TemplateBinding DropDownToolTipDescription}"
														   ToolTipImageSource="{TemplateBinding DropDownToolTipImageSource}"
														   ToolTipFooterTitle="{TemplateBinding DropDownToolTipFooterTitle}"
														   ToolTipFooterDescription="{TemplateBinding DropDownToolTipFooterDescription}"
														   ToolTipFooterImageSource="{TemplateBinding DropDownToolTipFooterImageSource}"
														   ClickMode="Press"
														   IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay}"
														   ToolTipService.InitialShowDelay="{StaticResource &#224;}"
														   ToolTipService.ShowDuration="{StaticResource &#225;}"
														   ToolTipService.BetweenShowDelay="{StaticResource &#226;}">
									<ribbon:RibbonToggleButton.ControlSizeDefinition>
										<ribbon:RibbonControlSizeDefinition ImageSize="Collapsed"
																			IsLabelVisible="False" />
									</ribbon:RibbonToggleButton.ControlSizeDefinition>
								</ribbon:RibbonToggleButton>
								<Border x:Name="OverlayBottomBorder"
										BorderBrush="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
										Height="2"
										VerticalAlignment="Top" />
								<Border x:Name="OverlayTopBorder"
										BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
										Margin="1,0" />

								<Popup x:Name="PART_Popup"
									   HorizontalOffset="1"
									   VerticalOffset="-1"
									   AllowsTransparency="True"
									   Placement="Bottom"
									   IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen}"
									   Focusable="False"
									   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
									<classic:SystemDropShadowChrome Name="Shadow"
																	Color="Transparent"
																	controls:KeyTipService.IsKeyTipScope="True"
																	RenderOptions.ClearTypeHint="Enabled">
										<Border Name="MenuBorder"
												BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
												Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
												BorderThickness="{TemplateBinding BorderThickness}"
												CornerRadius="2">
											<Border x:Name="SubMenuInnerBorder"
													Background="{StaticResource &#239;}"
													BorderThickness="0"
													CornerRadius="2">
												<Grid>
													<Grid.RowDefinitions>
														<RowDefinition Height="Auto" />
														<RowDefinition />
														<RowDefinition Height="Auto" />
													</Grid.RowDefinitions>
													<ScrollViewer x:Name="PART_SubMenuScrollViewer"
																  Grid.Row="1"
																  Margin="1"
																  Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">

														<Grid RenderOptions.ClearTypeHint="Enabled">
															<Canvas x:Name="BackgroundCanvas"
																	Height="0"
																	Width="0"
																	HorizontalAlignment="Left"
																	VerticalAlignment="Top">
																<Rectangle x:Name="OpaqueRect"
																		   Height="{Binding ElementName=MenuBorder,Path=ActualHeight}"
																		   Width="{Binding ElementName=MenuBorder,Path=ActualWidth}"
																		   Fill="{Binding ElementName=MenuBorder,Path=Background}"
																		   RadiusX="2"
																		   RadiusY="2" />
																<Rectangle x:Name="OverlayRect"
																		   Height="{Binding ElementName=SubMenuInnerBorder,Path=ActualHeight}"
																		   Width="{Binding ElementName=SubMenuInnerBorder,Path=ActualWidth}"
																		   Fill="{Binding ElementName=SubMenuInnerBorder,Path=Background}"
																		   RadiusX="2"
																		   RadiusY="2" />
															</Canvas>

															<ItemsPresenter x:Name="ItemsPresenter"
																			KeyboardNavigation.TabNavigation="Cycle"
																			KeyboardNavigation.DirectionalNavigation="Cycle"
																			Grid.IsSharedSizeScope="True" />

														</Grid>

													</ScrollViewer>
													<Border Name="ResizeControl"
															Grid.Row="2"
															Visibility="Collapsed"
															Background="{StaticResource &#230;}"
															BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
															BorderThickness="0,1,0,0">
														<Thumb x:Name="PART_ResizeThumb"
															   Style="{StaticResource &#231;}" />
													</Border>
												</Grid>
											</Border>
										</Border>
									</classic:SystemDropShadowChrome>
								</Popup>
							</Grid>
							<ControlTemplate.Triggers>

								<Trigger SourceName="PART_SubMenuScrollViewer"
										 Property="ScrollViewer.CanContentScroll"
										 Value="false">
									<Setter TargetName="OpaqueRect"
											Property="Canvas.Top"
											Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
									<Setter TargetName="OpaqueRect"
											Property="Canvas.Left"
											Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
									<Setter TargetName="OverlayRect"
											Property="Canvas.Top"
											Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
									<Setter TargetName="OverlayRect"
											Property="Canvas.Left"
											Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
								</Trigger>

								<Trigger Property="IsDropDownOpen"
										 Value="True">
									<Setter TargetName="PART_ToggleButton"
											Property="ToolTipService.IsEnabled"
											Value="False" />
								</Trigger>
								<Trigger Property="HasGallery"
										 Value="True">
									<Setter TargetName="PART_SubMenuScrollViewer"
											Property="HorizontalScrollBarVisibility"
											Value="Disabled" />
									<Setter TargetName="PART_SubMenuScrollViewer"
											Property="VerticalScrollBarVisibility"
											Value="Disabled" />
								</Trigger>

								<!-- Large Variant -->
								<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
											 Value="Large">
									<Setter Property="MinWidth"
											Value="44" />
									<Setter TargetName="PART_ToggleButton"
											Property="ribbon:RibbonTwoLineText.HasTwoLines"
											Value="true" />
									<Setter TargetName="PART_ToggleButton"
											Property="CornerRadius"
											Value="2,2,2,2" />
								</DataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
												   Value="Large" />
										<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
												   Value="True" />
									</MultiDataTrigger.Conditions>
									<Setter TargetName="PART_ToggleButton"
											Property="ControlSizeDefinition">
										<Setter.Value>
											<ribbon:RibbonControlSizeDefinition ImageSize="Large"
																				IsLabelVisible="True" />
										</Setter.Value>
									</Setter>
								</MultiDataTrigger>

								<!-- Medium or Small Variant-->
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
												   Value="Small" />
										<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
												   Value="False" />
									</MultiDataTrigger.Conditions>
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
												   Value="Small" />
										<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
												   Value="True" />
										<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=LabelPosition}"
												   Value="DropDown" />
									</MultiDataTrigger.Conditions>
									<Setter TargetName="PART_ToggleButton"
											Property="ControlSizeDefinition">
										<Setter.Value>
											<ribbon:RibbonControlSizeDefinition ImageSize="Collapsed"
																				IsLabelVisible="True" />
										</Setter.Value>
									</Setter>
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
												   Value="Small" />
										<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
												   Value="True" />
										<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=LabelPosition}"
												   Value="Header" />
									</MultiDataTrigger.Conditions>
								</MultiDataTrigger>
								<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInQuickAccessToolBar}"
											 Value="True">
									<Setter TargetName="PART_ToggleButton"
											Property="Height"
											Value="Auto" />
								</DataTrigger>

								<!--Collapsed Variant-->
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
												   Value="Collapsed" />
										<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
												   Value="False" />
									</MultiDataTrigger.Conditions>
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
												   Value="Collapsed" />
										<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
												   Value="True" />
										<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=LabelPosition}"
												   Value="DropDown" />
									</MultiDataTrigger.Conditions>
									<Setter TargetName="PART_ToggleButton"
											Property="ControlSizeDefinition">
										<Setter.Value>
											<ribbon:RibbonControlSizeDefinition ImageSize="Collapsed"
																				IsLabelVisible="True" />
										</Setter.Value>
									</Setter>
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
												   Value="Collapsed" />
										<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
												   Value="True" />
										<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=LabelPosition}"
												   Value="Header" />
									</MultiDataTrigger.Conditions>
								</MultiDataTrigger>

								<!-- IsMouseOver -->

								<!-- IsFocused -->

								<!-- IsChecked -->
								<Trigger Property="IsChecked"
										 Value="True">
									<Setter TargetName="PART_ToggleButton"
											Property="BorderBrush"
											Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
								</Trigger>

								<!-- IsInControlGroup -->
								<Trigger Property="IsInControlGroup"
										 Value="True">
									<Setter TargetName="PART_ToggleButton"
											Property="CornerRadius"
											Value="0" />
								</Trigger>

								<!-- DropDown Triggers-->
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="CanUserResizeHorizontally"
												   Value="true" />
										<Condition Property="CanUserResizeVertically"
												   Value="true" />
									</MultiTrigger.Conditions>
									<Setter TargetName="ResizeControl"
											Property="Visibility"
											Value="Visible" />
								</MultiTrigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="CanUserResizeHorizontally"
												   Value="false" />
										<Condition Property="CanUserResizeVertically"
												   Value="true" />
									</MultiTrigger.Conditions>
									<Setter TargetName="ResizeControl"
											Property="Visibility"
											Value="Visible" />
									<Setter TargetName="PART_ResizeThumb"
											Property="Style"
											Value="{StaticResource &#232;}" />
								</MultiTrigger>
								<Trigger Property="IsDropDownPositionedAbove"
										 Value="true">
									<Setter TargetName="ResizeControl"
											Property="Grid.Row"
											Value="0" />
									<Setter TargetName="ResizeControl"
											Property="BorderThickness"
											Value="0,0,0,1" />
								</Trigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsDropDownPositionedAbove"
												   Value="true" />
										<Condition Property="CanUserResizeHorizontally"
												   Value="true" />
										<Condition Property="CanUserResizeVertically"
												   Value="true" />
									</MultiTrigger.Conditions>
									<Setter TargetName="PART_ResizeThumb"
											Property="Style"
											Value="{StaticResource &#233;}" />
								</MultiTrigger>
								<Trigger SourceName="PART_Popup"
										 Property="Popup.HasDropShadow"
										 Value="True">
									<Setter TargetName="Shadow"
											Property="Margin"
											Value="0,0,5,5" />
									<Setter TargetName="Shadow"
											Property="Color"
											Value="{StaticResource &#213;}" />
								</Trigger>
								<Trigger SourceName="PART_Popup"
										 Property="Popup.IsOpen"
										 Value="False">
									<Setter TargetName="PART_Popup"
											Property="PopupAnimation"
											Value="None" />
								</Trigger>

								<Trigger Property="IsMouseOver"
										 Value="True">
									<Setter TargetName="UnderlayBorder"
											Property="Visibility"
											Value="Visible" />
									<Setter TargetName="PART_ToggleButton"
											Property="BorderBrush"
											Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
								</Trigger>

								<Trigger Property="IsEnabled"
										 Value="False">
									<Setter TargetName="MainGrid"
											Property="TextElement.Foreground"
											Value="{StaticResource &#203;}" />
								</Trigger>

								<!-- HighContrast -->
								<DataTrigger Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
											 Value="True">

									<Setter TargetName="BackgroundCanvas"
											Property="Visibility"
											Value="Collapsed" />

									<Setter TargetName="MainGrid"
											Property="TextElement.Foreground"
											Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
									<Setter TargetName="Shadow"
											Property="Color"
											Value="Transparent" />
									<Setter TargetName="PART_Popup"
											Property="PopupAnimation"
											Value="None" />
									<Setter TargetName="MenuBorder"
											Property="BorderBrush"
											Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
									<Setter TargetName="MenuBorder"
											Property="Background"
											Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
									<Setter TargetName="SubMenuInnerBorder"
											Property="Background"
											Value="Transparent" />
									<Setter TargetName="ResizeControl"
											Property="BorderBrush"
											Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
									<Setter TargetName="ResizeControl"
											Property="Background"
											Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
									<Setter TargetName="PART_ToggleButton"
											Property="CornerRadius"
											Value="0" />
									<Setter TargetName="UnderlayBorder"
											Property="Opacity"
											Value="0" />
								</DataTrigger>

								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}"
												   Value="True" />
										<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
												   Value="True" />
									</MultiDataTrigger.Conditions>
									<Setter TargetName="PART_ToggleButton"
											Property="BorderBrush"
											Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
									<Setter TargetName="OverlayBottomBorder"
											Property="BorderThickness"
											Value="1" />
									<Setter TargetName="OverlayTopBorder"
											Property="BorderThickness"
											Value="0,1,0,0" />
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}"
												   Value="True" />
										<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
												   Value="True" />
									</MultiDataTrigger.Conditions>
									<Setter TargetName="UnderlayBorder"
											Property="Opacity"
											Value="1" />
									<Setter TargetName="UnderlayBorder"
											Property="Background"
											Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
								</MultiDataTrigger>

								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}"
												   Value="True" />
										<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}"
												   Value="True" />
										<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
												   Value="True" />
									</MultiDataTrigger.Conditions>
									<Setter TargetName="PART_ToggleButton"
											Property="BorderBrush"
											Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
								</MultiDataTrigger>

								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding ElementName=PART_ToggleButton, Path=IsKeyboardFocused}"
												   Value="True" />
										<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}"
												   Value="True" />
										<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
												   Value="True" />
									</MultiDataTrigger.Conditions>
									<Setter TargetName="PART_ToggleButton"
											Property="BorderBrush"
											Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
								</MultiDataTrigger>

								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}"
												   Value="False" />
										<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
												   Value="True" />
									</MultiDataTrigger.Conditions>
									<Setter TargetName="MainGrid"
											Property="TextElement.Foreground"
											Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
								</MultiDataTrigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>

	<!-- Стиль для RibbonApplicationMenu -->
	<SolidColorBrush x:Key="&#215;"
					 Color="#FF114EAF" />

	<!-- Semi-transparent brushes which produce tints of the main BorderBrush color or the Ribbon colors. -->
	<LinearGradientBrush x:Key="&#216;"
						 StartPoint="0,0"
						 EndPoint="0,1">
		<GradientStop Offset="0"
					  Color="#90FFFFFF" />
		<GradientStop Offset="0.5"
					  Color="#30FFFFFF" />
		<GradientStop Offset="0.5"
					  Color="Transparent" />
		<GradientStop Offset="1"
					  Color="#70FFFFFF" />
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="&#217;"
						 StartPoint="0,0"
						 EndPoint="0,1">
		<GradientStop Offset="0"
					  Color="#60FFFFFF" />
		<GradientStop Offset="0.5"
					  Color="#20FFFFFF" />
		<GradientStop Offset="0.5"
					  Color="Transparent" />
		<GradientStop Offset="1"
					  Color="Transparent" />
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="&#218;"
						 StartPoint="0,0"
						 EndPoint="0,1">
		<GradientStop Offset="0"
					  Color="#A0FFFFFF" />
		<GradientStop Offset="0.5"
					  Color="#60FFFFFF" />
		<GradientStop Offset="0.5"
					  Color="Transparent" />
		<GradientStop Offset="1"
					  Color="#D0FFFFFF" />
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="&#219;"
						 StartPoint="0,0"
						 EndPoint="0,1">
		<GradientStop Offset="0"
					  Color="#90FFFFFF" />
		<GradientStop Offset="0.5"
					  Color="#20FFFFFF" />
		<GradientStop Offset="0.5"
					  Color="Transparent" />
		<GradientStop Offset="1"
					  Color="Transparent" />
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="&#220;"
						 StartPoint="0,0"
						 EndPoint="0,1">
		<GradientStop Offset="0"
					  Color="#A0FFFFFF" />
		<GradientStop Offset="0.2"
					  Color="#90FFFFFF" />
		<GradientStop Offset="0.4"
					  Color="#80FFFFFF" />
		<GradientStop Offset="0.6"
					  Color="#50FFFFFF" />
		<GradientStop Offset="0.8"
					  Color="Transparent" />
		<GradientStop Offset="1"
					  Color="#30FFFFFF" />
	</LinearGradientBrush>

	<RadialGradientBrush x:Key="&#221;">
		<GradientStop Offset="0"
					  Color="LightGray" />
		<GradientStop Offset="0.4"
					  Color="White" />
	</RadialGradientBrush>

	<Geometry x:Key="&#222;">M 0 0 L 2.25 3 L 4.5 0 Z</Geometry>

	<Style x:Key="&#223;"
		   TargetType="{x:Type ribbon:RibbonToggleButton}">
		<Setter Property="BorderBrush"
				Value="{StaticResource &#215;}" />
		<Setter Property="Background"
				Value="{StaticResource &#215;}" />
		<Setter Property="BorderThickness"
				Value="1" />
		<Setter Property="Foreground"
				Value="{StaticResource &#221;}" />
		<Setter Property="ClickMode"
				Value="Press" />
		<Setter Property="FocusVisualStyle"
				Value="{x:Null}" />
		<Setter Property="FocusManager.IsFocusScope"
				Value="False" />
		<Setter Property="VerticalAlignment"
				Value="Bottom" />
		<Setter Property="ToolTipService.InitialShowDelay"
				Value="{StaticResource &#224;}" />
		<Setter Property="ToolTipService.ShowDuration"
				Value="{StaticResource &#225;}" />
		<Setter Property="ToolTipService.BetweenShowDelay"
				Value="{StaticResource &#226;}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ribbon:RibbonToggleButton}">
					<Grid Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Height}"
						  Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Width}"
						  SnapsToDevicePixels="True">
						<Border x:Name="OuterBorder"
								BorderBrush="{TemplateBinding BorderBrush}"
								Background="{TemplateBinding Background}"
								BorderThickness="{TemplateBinding BorderThickness}"
								CornerRadius="0,2,0,0"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch" />
						<Border x:Name="MiddleBorder"
								BorderBrush="Transparent"
								Background="{StaticResource &#216;}"
								BorderThickness="{TemplateBinding BorderThickness}"
								CornerRadius="0,2,0,0"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch">
							<Border x:Name="InnerBorder"
									BorderBrush="{StaticResource &#217;}"
									Background="Transparent"
									BorderThickness="1"
									CornerRadius="0,2,0,0" />
						</Border>

						<StackPanel Orientation="Horizontal"
									HorizontalAlignment="Center"
									VerticalAlignment="Center">
							<Image IsHitTestVisible="False"
								   Source="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ribbon:RibbonApplicationMenu}}, Path=SmallImageSource}"
								   HorizontalAlignment="Center"
								   VerticalAlignment="Center"
								   Width="16"
								   Height="16"
								   Margin="0,-0.5,0,0"
								   RenderOptions.BitmapScalingMode="Fant"
								   RenderOptions.EdgeMode="Aliased" />
							<Path x:Name="DownArrow"
								  Data="{StaticResource &#222;}"
								  Stroke="{StaticResource &#216;}"
								  StrokeThickness=".5"
								  Fill="{TemplateBinding Foreground}"
								  HorizontalAlignment="Center"
								  VerticalAlignment="Center"
								  Margin="3.5,0,0,0">
								<Path.RenderTransform>
									<ScaleTransform ScaleX="1.5"
													ScaleY="1.5" />
								</Path.RenderTransform>
							</Path>

						</StackPanel>
					</Grid>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsKeyboardFocused"
										   Value="True" />
								<Condition Property="IsChecked"
										   Value="False" />
							</MultiTrigger.Conditions>
							<Setter TargetName="MiddleBorder"
									Property="BorderBrush"
									Value="{StaticResource &#227;}" />
							<Setter TargetName="MiddleBorder"
									Property="Background"
									Value="{StaticResource &#218;}" />
							<Setter TargetName="InnerBorder"
									Property="BorderBrush"
									Value="{StaticResource &#219;}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver"
										   Value="True" />
								<Condition Property="IsChecked"
										   Value="False" />
							</MultiTrigger.Conditions>
							<Setter TargetName="MiddleBorder"
									Property="BorderBrush"
									Value="{StaticResource &#227;}" />
							<Setter TargetName="MiddleBorder"
									Property="Background"
									Value="{StaticResource &#218;}" />
							<Setter TargetName="InnerBorder"
									Property="BorderBrush"
									Value="{StaticResource &#219;}" />
						</MultiTrigger>
						<DataTrigger Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
									 Value="True">
							<Setter TargetName="OuterBorder"
									Property="BorderBrush"
									Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
							<Setter TargetName="OuterBorder"
									Property="Background"
									Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
							<Setter TargetName="OuterBorder"
									Property="CornerRadius"
									Value="0" />
							<Setter TargetName="MiddleBorder"
									Property="BorderBrush"
									Value="Transparent" />
							<Setter TargetName="MiddleBorder"
									Property="Background"
									Value="Transparent" />
							<Setter TargetName="MiddleBorder"
									Property="CornerRadius"
									Value="0" />
							<Setter TargetName="InnerBorder"
									Property="BorderBrush"
									Value="Transparent" />
							<Setter TargetName="InnerBorder"
									Property="Background"
									Value="Transparent" />
							<Setter TargetName="InnerBorder"
									Property="CornerRadius"
									Value="0" />
							<Setter TargetName="DownArrow"
									Property="Stroke"
									Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
							<Setter TargetName="DownArrow"
									Property="Fill"
									Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
						</DataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type ribbon:RibbonApplicationMenu}">
		<Style.Resources>
			<Style x:Key="{x:Static MenuItem.SeparatorStyleKey}"
				   TargetType="{x:Type ribbon:RibbonSeparator}">
				<Setter Property="OverridesDefaultStyle"
						Value="True" />
				<Setter Property="Focusable"
						Value="False" />
				<Setter Property="BorderBrush"
						Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonApplicationMenu}}, Path=Ribbon.BorderBrush}" />
				<Setter Property="Background"
						Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonApplicationMenu}}, Path=Ribbon.Background}" />
				<Setter Property="FontWeight"
						Value="Bold" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ribbon:RibbonSeparator}">
							<Border x:Name="MainBorder"
									BorderThickness="0,1,0,1"
									BorderBrush="{TemplateBinding BorderBrush}"
									Background="{TemplateBinding Background}">
								<Border x:Name="Overlay"
										Background="{StaticResource &#228;}">
									<TextBlock x:Name="Text"
											   Margin="2,1,2,1"
											   Text="{TemplateBinding Label}" />
								</Border>
							</Border>
							<ControlTemplate.Triggers>
								<DataTrigger Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
											 Value="True">
									<Setter TargetName="Text"
											Property="Foreground"
											Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
									<Setter TargetName="Overlay"
											Property="Background"
											Value="Transparent" />
									<Setter TargetName="MainBorder"
											Property="BorderBrush"
											Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
									<Setter TargetName="MainBorder"
											Property="Background"
											Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
								</DataTrigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Style.Triggers>
					<Trigger Property="Label"
							 Value="{x:Null}">
						<Setter Property="Template">
							<Setter.Value>
								<ControlTemplate TargetType="{x:Type ribbon:RibbonSeparator}">
									<Grid x:Name="Grid"
										  Margin="1"
										  SnapsToDevicePixels="True">
										<Grid.ColumnDefinitions>
											<!--Icon or check mark column-->
											<ColumnDefinition Width="Auto"
															  SharedSizeGroup="MenuItemIconColumnGroup" />
											<!--Header column-->
											<ColumnDefinition Width="*"
															  MinWidth="44" />
											<!--Submenu arrow column-->
											<ColumnDefinition Width="22" />
										</Grid.ColumnDefinitions>

										<Line x:Name="Line"
											  Grid.Column="1"
											  Grid.ColumnSpan="2"
											  X1="0"
											  Y1="0"
											  X2="1"
											  Y2="0"
											  Stroke="{TemplateBinding BorderBrush}"
											  StrokeThickness="1"
											  Stretch="Fill" />
									</Grid>

									<ControlTemplate.Triggers>
										<DataTrigger Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
													 Value="True">
											<Setter TargetName="Line"
													Property="Stroke"
													Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
											<Setter TargetName="Grid"
													Property="Margin"
													Value="0" />
										</DataTrigger>
									</ControlTemplate.Triggers>
								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</Trigger>
				</Style.Triggers>
			</Style>
		</Style.Resources>
		<Setter Property="BorderBrush"
				Value="{StaticResource &#215;}" />
		<Setter Property="Background"
				Value="{StaticResource &#215;}" />
		<Setter Property="BorderThickness"
				Value="1" />
		<Setter Property="FocusVisualStyle"
				Value="{x:Null}" />
		<Setter Property="Height"
				Value="23" />
		<Setter Property="Width"
				Value="56" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ribbon:RibbonApplicationMenu}">
					<Grid Focusable="False"
						  x:Name="OuterGrid"
						  SnapsToDevicePixels="True">
						<ribbon:RibbonToggleButton x:Name="PART_ToggleButton"
												   BorderBrush="{TemplateBinding BorderBrush}"
												   Background="{TemplateBinding Background}"
												   BorderThickness="{TemplateBinding BorderThickness}"
												   Style="{StaticResource &#223;}"
												   FocusVisualStyle="{TemplateBinding FocusVisualStyle}"
												   Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Height}"
												   Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Width}"
												   ToolTipTitle="{TemplateBinding ToolTipTitle}"
												   ToolTipDescription="{TemplateBinding ToolTipDescription}"
												   ToolTipImageSource="{TemplateBinding ToolTipImageSource}"
												   ToolTipFooterTitle="{TemplateBinding ToolTipFooterTitle}"
												   ToolTipFooterDescription="{TemplateBinding ToolTipFooterDescription}"
												   ToolTipFooterImageSource="{TemplateBinding ToolTipFooterImageSource}"
												   SmallImageSource="{TemplateBinding SmallImageSource}"
												   IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay}" />
						<Border x:Name="CenterBorder"
								Height="1"
								Margin="-1,-1,0,0"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Top" />
						<Popup x:Name="PART_Popup"
							   IsOpen="{Binding  RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen}"
							   PlacementTarget="{Binding ElementName=CenterBorder}"
							   AllowsTransparency="True"
							   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
							   SnapsToDevicePixels="True">
							<classic:SystemDropShadowChrome x:Name="Shadow"
															Color="Transparent"
															controls:KeyTipService.IsKeyTipScope="True"
															RenderOptions.ClearTypeHint="Enabled">
								<Grid>
									<Border x:Name="PopupBorder"
											BorderBrush="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonMenuButton}}, Path=Ribbon.BorderBrush}"
											Background="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonMenuButton}}, Path=Ribbon.Background}"
											BorderThickness="1"
											CornerRadius="2">
										<Grid>
											<Grid.RowDefinitions>
												<RowDefinition Height="24" />
												<RowDefinition Height="*" />
												<RowDefinition Height="Auto" />
											</Grid.RowDefinitions>
											<Border x:Name="HeaderBorder"
													BorderBrush="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonMenuButton}}, Path=Ribbon.BorderBrush}"
													Background="Transparent"
													BorderThickness="0,0,0,1"
													CornerRadius="2,2,0,0" />
											<Border x:Name="HeaderOverlayBorder"
													BorderBrush="{StaticResource &#227;}"
													Background="{StaticResource &#218;}"
													BorderThickness="0,0,0,1"
													CornerRadius="2,2,0,0" />
											<Grid Grid.Row="1">
												<Grid.ColumnDefinitions>
													<ColumnDefinition Width="Auto" />
													<ColumnDefinition Width="2" />
													<ColumnDefinition Width="300" />
												</Grid.ColumnDefinitions>
												<Border x:Name="MainPaneBorder"
														Background="{StaticResource &#229;}">
													<Grid>
														<Grid.RowDefinitions>
															<RowDefinition Height="Auto" />
															<RowDefinition />
															<RowDefinition Height="Auto" />
														</Grid.RowDefinitions>
														<ScrollViewer x:Name="PART_SubMenuScrollViewer"
																	  Grid.Row="1"
																	  CanContentScroll="True"
																	  Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">

															<Grid RenderOptions.ClearTypeHint="Enabled">
																<Canvas x:Name="BackgroundCanvas"
																		Height="0"
																		Width="0"
																		HorizontalAlignment="Left"
																		VerticalAlignment="Top">
																	<Rectangle x:Name="OpaqueRect"
																			   Height="{Binding ElementName=MainPaneBorder,Path=ActualHeight}"
																			   Width="{Binding ElementName=MainPaneBorder,Path=ActualWidth}"
																			   Fill="{Binding ElementName=MainPaneBorder,Path=Background}"
																			   RadiusX="2"
																			   RadiusY="2" />
																	<Rectangle x:Name="OverlayRect"
																			   Height="{Binding ElementName=MainPaneBorder,Path=ActualHeight}"
																			   Width="{Binding ElementName=MainPaneBorder,Path=ActualWidth}"
																			   Fill="{Binding ElementName=MainPaneBorder,Path=Background}"
																			   RadiusX="2"
																			   RadiusY="2" />
																</Canvas>

																<ItemsPresenter x:Name="ItemsPresenter"
																				Grid.IsSharedSizeScope="True" />

															</Grid>

														</ScrollViewer>
														<Border Name="ResizeControl"
																Grid.Row="2"
																Visibility="Collapsed"
																Background="{StaticResource &#230;}"
																BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
																BorderThickness="0,1,0,0">
															<Thumb x:Name="PART_ResizeThumb"
																   Style="{StaticResource &#231;}" />
														</Border>
													</Grid>
												</Border>
												<Border x:Name="PART_SubmenuPlaceholder"
														Height="{Binding ElementName=MainPaneBorder,Path=ActualHeight}"
														Grid.Column="2"
														Background="{StaticResource &#227;}">
													<ContentPresenter x:Name="PART_AuxiliaryPaneContentPresenter"
																	  ContentSource="AuxiliaryPaneContent"
																	  ContentTemplate="{TemplateBinding AuxiliaryPaneContentTemplate}"
																	  ContentTemplateSelector="{TemplateBinding AuxiliaryPaneContentTemplateSelector}" />
												</Border>
												<Border x:Name="VerticalBorder"
														Grid.Column="1"
														HorizontalAlignment="Left"
														Background="White"
														Width="2"
														BorderThickness="1,0,0,0"
														BorderBrush="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonMenuButton}}, Path=Ribbon.BorderBrush}" />
												<Border x:Name="VerticalOverlayBorder"
														Grid.Column="1"
														HorizontalAlignment="Left"
														Background="Transparent"
														Width="2"
														BorderThickness="1,0,0,0"
														BorderBrush="{StaticResource &#227;}" />
											</Grid>

											<Border x:Name="FooterBorder"
													Grid.Row="2"
													BorderBrush="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonMenuButton}}, Path=Ribbon.BorderBrush}"
													Background="Transparent"
													BorderThickness="0,1,0,0"
													CornerRadius="0,0,2,2">
												<Border x:Name="FooterBackgroundOverlayBorder"
														BorderBrush="Transparent"
														Background="{StaticResource &#220;}"
														CornerRadius="0,0,2,2">
													<ContentPresenter x:Name="PART_FooterPaneContentPresenter"
																	  Margin="2"
																	  MinHeight="12"
																	  ContentSource="FooterPaneContent"
																	  ContentTemplate="{TemplateBinding FooterPaneContentTemplate}"
																	  ContentTemplateSelector="{TemplateBinding FooterPaneContentTemplateSelector}" />
												</Border>
											</Border>
											<Border x:Name="FooterOverlayBorder"
													VerticalAlignment="Stretch"
													HorizontalAlignment="Stretch"
													BorderBrush="{StaticResource &#227;}"
													Background="Transparent"
													BorderThickness="0,1,0,0"
													CornerRadius="0,0,2,2" />
										</Grid>
									</Border>
									<Canvas>
										<ribbon:RibbonToggleButton x:Name="PART_PopupToggleButton"
																   AutomationProperties.Name="{Binding  RelativeSource={RelativeSource TemplatedParent}, Path=(AutomationProperties.Name)}"
																   Canvas.Top="-24"
																   Canvas.Left="3"
																   IsChecked="{Binding  RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen}"
																   BorderBrush="{TemplateBinding BorderBrush}"
																   Background="{TemplateBinding Background}"
																   BorderThickness="{TemplateBinding BorderThickness}"
																   Style="{StaticResource &#223;}"
																   Focusable="False"
																   Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Height}"
																   Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Width}" />
									</Canvas>
								</Grid>
							</classic:SystemDropShadowChrome>
						</Popup>

					</Grid>

					<ControlTemplate.Triggers>

						<Trigger SourceName="PART_SubMenuScrollViewer"
								 Property="ScrollViewer.CanContentScroll"
								 Value="false">
							<Setter TargetName="OpaqueRect"
									Property="Canvas.Top"
									Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
							<Setter TargetName="OpaqueRect"
									Property="Canvas.Left"
									Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
							<Setter TargetName="OverlayRect"
									Property="Canvas.Top"
									Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
							<Setter TargetName="OverlayRect"
									Property="Canvas.Left"
									Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
						</Trigger>

						<Trigger Property="HasGallery"
								 Value="True">
							<Setter TargetName="PART_SubMenuScrollViewer"
									Property="HorizontalScrollBarVisibility"
									Value="Disabled" />
							<Setter TargetName="PART_SubMenuScrollViewer"
									Property="VerticalScrollBarVisibility"
									Value="Disabled" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="CanUserResizeHorizontally"
										   Value="true" />
								<Condition Property="CanUserResizeVertically"
										   Value="true" />
							</MultiTrigger.Conditions>
							<Setter TargetName="ResizeControl"
									Property="Visibility"
									Value="Visible" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="CanUserResizeHorizontally"
										   Value="false" />
								<Condition Property="CanUserResizeVertically"
										   Value="true" />
							</MultiTrigger.Conditions>
							<Setter TargetName="ResizeControl"
									Property="Visibility"
									Value="Visible" />
							<Setter TargetName="PART_ResizeThumb"
									Property="Style"
									Value="{StaticResource &#232;}" />
						</MultiTrigger>
						<Trigger Property="IsDropDownPositionedAbove"
								 Value="true">
							<Setter TargetName="ResizeControl"
									Property="Grid.Row"
									Value="0" />
							<Setter TargetName="ResizeControl"
									Property="BorderThickness"
									Value="0,0,0,1" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsDropDownPositionedAbove"
										   Value="true" />
								<Condition Property="CanUserResizeHorizontally"
										   Value="true" />
								<Condition Property="CanUserResizeVertically"
										   Value="true" />
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_ResizeThumb"
									Property="Style"
									Value="{StaticResource &#233;}" />
						</MultiTrigger>
						<Trigger SourceName="PART_Popup"
								 Property="Popup.HasDropShadow"
								 Value="True">
							<Setter TargetName="Shadow"
									Property="Margin"
									Value="0,0,5,5" />
							<Setter TargetName="Shadow"
									Property="Color"
									Value="{StaticResource &#213;}" />
						</Trigger>

						<Trigger SourceName="PART_Popup"
								 Property="Popup.IsOpen"
								 Value="False">
							<Setter TargetName="PART_Popup"
									Property="PopupAnimation"
									Value="None" />
						</Trigger>

						<DataTrigger Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
									 Value="True">

							<Setter TargetName="BackgroundCanvas"
									Property="Visibility"
									Value="Collapsed" />

							<Setter TargetName="PART_Popup"
									Property="PopupAnimation"
									Value="None" />
							<Setter TargetName="Shadow"
									Property="Color"
									Value="Transparent" />
							<Setter TargetName="OuterGrid"
									Property="TextElement.Foreground"
									Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
							<Setter TargetName="PopupBorder"
									Property="BorderBrush"
									Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
							<Setter TargetName="PopupBorder"
									Property="Background"
									Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
							<Setter TargetName="PopupBorder"
									Property="CornerRadius"
									Value="0" />
							<Setter TargetName="HeaderBorder"
									Property="BorderBrush"
									Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
							<Setter TargetName="HeaderBorder"
									Property="CornerRadius"
									Value="0" />
							<Setter TargetName="HeaderOverlayBorder"
									Property="BorderBrush"
									Value="Transparent" />
							<Setter TargetName="HeaderOverlayBorder"
									Property="Background"
									Value="Transparent" />
							<Setter TargetName="HeaderOverlayBorder"
									Property="CornerRadius"
									Value="0" />
							<Setter TargetName="MainPaneBorder"
									Property="Background"
									Value="Transparent" />
							<Setter TargetName="PART_SubmenuPlaceholder"
									Property="Background"
									Value="Transparent" />
							<Setter TargetName="VerticalBorder"
									Property="BorderBrush"
									Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
							<Setter TargetName="VerticalBorder"
									Property="Background"
									Value="Transparent" />
							<Setter TargetName="VerticalOverlayBorder"
									Property="BorderBrush"
									Value="Transparent" />
							<Setter TargetName="FooterBorder"
									Property="BorderBrush"
									Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
							<Setter TargetName="FooterBorder"
									Property="CornerRadius"
									Value="0" />
							<Setter TargetName="FooterOverlayBorder"
									Property="BorderBrush"
									Value="Transparent" />
							<Setter TargetName="FooterOverlayBorder"
									Property="CornerRadius"
									Value="0" />
							<Setter TargetName="FooterBackgroundOverlayBorder"
									Property="Background"
									Value="Transparent" />
							<Setter TargetName="FooterBackgroundOverlayBorder"
									Property="CornerRadius"
									Value="0" />
							<Setter TargetName="ResizeControl"
									Property="BorderBrush"
									Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
							<Setter TargetName="ResizeControl"
									Property="Background"
									Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
						</DataTrigger>

					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsDropDownOpen"
					 Value="True">
				<Setter Property="ToolTipService.IsEnabled"
						Value="False" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<!-- Шаблон для RibbonButton, у которого картинка будет масшабироваться без "изъеденных углов" -->
	<ControlTemplate x:Key="RibbonButtonWithGoodImgScalingTemplate"
					 TargetType="{x:Type ribbon:RibbonButton}">
		<Border x:Name="OuterBorder"
				CornerRadius="{TemplateBinding CornerRadius}"
				Background="{TemplateBinding Background}"
				BorderBrush="{TemplateBinding BorderBrush}"
				BorderThickness="{TemplateBinding BorderThickness}"
				SnapsToDevicePixels="True">
			<Border x:Name="InnerBorder"
					BorderBrush="Transparent"
					BorderThickness="{TemplateBinding BorderThickness}"
					Padding="{TemplateBinding Padding}"
					CornerRadius="{TemplateBinding CornerRadius}">
				<StackPanel x:Name="StackPanel">
					<Image x:Name="PART_Image"
						   Source="{TemplateBinding LargeImageSource}"
						   Width="40"
						   Height="40"
						   Margin="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon}, ResourceId=LargeImageMargin}}"
						   RenderOptions.BitmapScalingMode="Fant"
						   VerticalAlignment="Center"
						   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
					<Grid x:Name="Grid"
						  VerticalAlignment="Center"
						  HorizontalAlignment="Center">
						<ribbon:RibbonTwoLineText x:Name="TwoLineText"
												  Text="{TemplateBinding Label}"
												  TextAlignment="Center"
												  VerticalAlignment="Top"
												  HorizontalAlignment="Center"
												  LineHeight="13px"
												  LineStackingStrategy="BlockLineHeight"
												  Margin="1,1,1,0" />
					</Grid>
				</StackPanel>
			</Border>
		</Border>

		<ControlTemplate.Triggers>

			<!-- Large Variant -->
			<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
						 Value="Large">
				<Setter Property="MinWidth"
						Value="44" />
				<Setter Property="Height"
						Value="66" />
				<Setter TargetName="Grid"
						Property="MinHeight"
						Value="26" />
				<Setter TargetName="TwoLineText"
						Property="ribbon:RibbonTwoLineText.HasTwoLines"
						Value="True" />
			</DataTrigger>

			<!-- Medium or Small Variant -->
			<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
						 Value="Small">
				<Setter Property="Height"
						Value="22" />
				<Setter TargetName="PART_Image"
						Property="Margin"
						Value="1,0,1,0" />
				<Setter TargetName="PART_Image"
						Property="Source"
						Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SmallImageSource}" />
				<Setter TargetName="PART_Image"
						Property="Width"
						Value="16" />
				<Setter TargetName="PART_Image"
						Property="Height"
						Value="16" />
				<Setter TargetName="TwoLineText"
						Property="HorizontalAlignment"
						Value="Left" />
				<Setter TargetName="TwoLineText"
						Property="Margin"
						Value="1" />
				<Setter TargetName="StackPanel"
						Property="Orientation"
						Value="Horizontal" />
			</DataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
							   Value="Small" />
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInQuickAccessToolBar}"
							   Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter Property="Height"
						Value="Auto" />
			</MultiDataTrigger>

			<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}"
						 Value="False">
				<Setter TargetName="TwoLineText"
						Property="Visibility"
						Value="Collapsed" />
			</DataTrigger>

			<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}"
						 Value="Collapsed">
				<Setter TargetName="PART_Image"
						Property="Visibility"
						Value="Collapsed" />
			</DataTrigger>

			<!-- IsMouseOver -->
			<Trigger Property="IsMouseOver"
					 Value="True">
				<Setter TargetName="OuterBorder"
						Property="Background"
						Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
				<Setter TargetName="OuterBorder"
						Property="BorderBrush"
						Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
				<Setter TargetName="InnerBorder"
						Property="BorderBrush"
						Value="{StaticResource &#227;}" />
			</Trigger>

			<!-- IsFocused -->
			<Trigger Property="IsKeyboardFocused"
					 Value="True">
				<Setter TargetName="OuterBorder"
						Property="Background"
						Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}" />
				<Setter TargetName="OuterBorder"
						Property="BorderBrush"
						Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}" />
				<Setter TargetName="InnerBorder"
						Property="BorderBrush"
						Value="{StaticResource &#227;}" />
			</Trigger>

			<!-- IsPressed -->
			<Trigger Property="IsPressed"
					 Value="True">
				<Setter TargetName="OuterBorder"
						Property="Background"
						Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
				<Setter TargetName="OuterBorder"
						Property="BorderBrush"
						Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
				<Setter TargetName="InnerBorder"
						Property="BorderBrush"
						Value="Transparent" />
			</Trigger>

			<!-- IsInControlGroup -->
			<Trigger Property="IsInControlGroup"
					 Value="True">
				<Setter TargetName="OuterBorder"
						Property="BorderBrush"
						Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}" />
				<Setter TargetName="OuterBorder"
						Property="BorderThickness"
						Value="0,0,1,0" />
				<Setter TargetName="OuterBorder"
						Property="CornerRadius"
						Value="0" />
				<Setter TargetName="InnerBorder"
						Property="CornerRadius"
						Value="0" />
			</Trigger>

			<!-- IsEnabled -->
			<Trigger Property="IsEnabled"
					 Value="False">
				<Setter TargetName="PART_Image"
						Property="Opacity"
						Value="0.5" />
				<Setter TargetName="OuterBorder"
						Property="TextElement.Foreground"
						Value="{StaticResource &#203;}" />
			</Trigger>

			<!-- Override potential app-level brushes in HighContrast. -->
			<DataTrigger Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
						 Value="True">
				<Setter TargetName="OuterBorder"
						Property="TextElement.Foreground"
						Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
				<Setter TargetName="OuterBorder"
						Property="Background"
						Value="Transparent" />
				<Setter TargetName="OuterBorder"
						Property="BorderBrush"
						Value="Transparent" />
				<Setter TargetName="OuterBorder"
						Property="CornerRadius"
						Value="0" />
			</DataTrigger>

			<!-- In the scenario where this control is part of RibbonSplitButton's or some other control's template,
				 we need to handle TemplatedParent's IsMouseOver state similarly to how we handle our own IsMouseOver state. -->
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}"
							   Value="True" />
					<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
							   Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter TargetName="OuterBorder"
						Property="BorderBrush"
						Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}"
							   Value="True" />
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}"
							   Value="False" />
					<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
							   Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter TargetName="OuterBorder"
						Property="BorderBrush"
						Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen}"
							   Value="True" />
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}"
							   Value="False" />
					<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
							   Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter TargetName="OuterBorder"
						Property="BorderBrush"
						Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
			</MultiDataTrigger>

			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}"
							   Value="True" />
					<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
							   Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter TargetName="OuterBorder"
						Property="Background"
						Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
				<Setter TargetName="OuterBorder"
						Property="BorderBrush"
						Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
				<Setter TargetName="OuterBorder"
						Property="CornerRadius"
						Value="0" />
				<Setter TargetName="InnerBorder"
						Property="BorderBrush"
						Value="Transparent" />
				<Setter TargetName="OuterBorder"
						Property="TextElement.Foreground"
						Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
			</MultiDataTrigger>

			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}"
							   Value="True" />
					<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
							   Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter TargetName="OuterBorder"
						Property="Background"
						Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
				<Setter TargetName="OuterBorder"
						Property="BorderBrush"
						Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
				<Setter TargetName="OuterBorder"
						Property="CornerRadius"
						Value="0" />
				<Setter TargetName="InnerBorder"
						Property="BorderBrush"
						Value="Transparent" />
				<Setter TargetName="OuterBorder"
						Property="TextElement.Foreground"
						Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
			</MultiDataTrigger>

			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}"
							   Value="True" />
					<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
							   Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter TargetName="OuterBorder"
						Property="Background"
						Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
				<Setter TargetName="OuterBorder"
						Property="BorderBrush"
						Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
				<Setter TargetName="OuterBorder"
						Property="CornerRadius"
						Value="0" />
				<Setter TargetName="OuterBorder"
						Property="TextElement.Foreground"
						Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
			</MultiDataTrigger>

			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInControlGroup}"
							   Value="True" />
					<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
							   Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter TargetName="OuterBorder"
						Property="BorderBrush"
						Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
			</MultiDataTrigger>

			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}"
							   Value="False" />
					<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
							   Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter TargetName="OuterBorder"
						Property="TextElement.Foreground"
						Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
			</MultiDataTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<SolidColorBrush x:Key="&#293;"
					 Color="#FF6C747D" />
	<DrawingBrush x:Key="&#294;"
				  Viewbox="0,0,3,3"
				  Viewport="0,0,3,3"
				  TileMode="Tile"
				  ViewportUnits="Absolute"
				  ViewboxUnits="Absolute">
		<DrawingBrush.Drawing>
			<DrawingGroup>
				<DrawingGroup.Children>
					<GeometryDrawing Brush="{StaticResource &#293;}"
									 Geometry="M 0,0 L 2,0 L 2,2 L 0,2 z " />
				</DrawingGroup.Children>
			</DrawingGroup>
		</DrawingBrush.Drawing>
	</DrawingBrush>

	<LinearGradientBrush x:Key="&#228;"
						 StartPoint="0,0"
						 EndPoint="1,0">
		<GradientStop Offset="0"
					  Color="#A0FFFFFF" />
		<GradientStop Offset="0.4"
					  Color="#80FFFFFF" />
		<GradientStop Offset="0.8"
					  Color="#0AFFFFFF" />
		<GradientStop Offset="1"
					  Color="#08FFFFFF" />
	</LinearGradientBrush>

	<SolidColorBrush x:Key="&#230;"
					 Color="#FFE5EFF9" />

	<Style x:Key="&#231;"
		   TargetType="{x:Type Thumb}">
		<Setter Property="Width"
				Value="11" />
		<Setter Property="Height"
				Value="11" />
		<Setter Property="VerticalAlignment"
				Value="Bottom" />
		<Setter Property="HorizontalAlignment"
				Value="Right" />
		<Setter Property="Cursor"
				Value="SizeNWSE" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Border Background="Transparent">
						<Path Margin="0,0,2,2"
							  Data="M 9,0 L 11,0 L 11,11 L 0,11 L 0,9 L 3,9 L 3,6 L 6,6 L 6,3 L 9,3 z"
							  Fill="{StaticResource &#294;}">
						</Path>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="FlowDirection"
					 Value="RightToLeft">
				<Setter Property="Cursor"
						Value="SizeNESW" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<Geometry x:Key="&#235;">M 0,5.1 L 1.7,5.2 L 3.4,7.1 L 8,0.4 L 9.2,0 L 3.3,10.8 Z</Geometry>
	<Geometry x:Key="&#236;">M 0,0 L 4,3.5 L 0,7 Z</Geometry>
	<SolidColorBrush x:Key="&#239;"
					 Color="#F0FFFFFF" />

	<!-- Стиль для RibbonMenuItem, у которой можно менять ширину и высоту картинки -->
	<Style x:Key="RibbonMenuItemWithResizingImg"
		   TargetType="{x:Type ribbon:RibbonMenuItem}"
		   BasedOn="{StaticResource ResourceKey={x:Type ribbon:RibbonMenuItem}}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ribbon:RibbonMenuItem}">
					<Grid x:Name="MainGrid"
						  SnapsToDevicePixels="True">
						<Border x:Name="Border"
								Background="{TemplateBinding Background}"
								BorderThickness="{TemplateBinding BorderThickness}"
								BorderBrush="{TemplateBinding BorderBrush}"
								CornerRadius="2">
							<Grid>
								<Grid.ColumnDefinitions>
									<!--Icon or check mark column-->
									<ColumnDefinition MinWidth="22"
													  Width="Auto"
													  SharedSizeGroup="MenuItemIconColumnGroup" />
									<!--Header column-->
									<ColumnDefinition Width="*" />
									<!--Submenu arrow column-->
									<ColumnDefinition Width="14" />
								</Grid.ColumnDefinitions>

								<Border x:Name="PART_SideBarBorder"
										Margin="0,-1,0,-1"
										BorderThickness="0,0,1,0"
										Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
										BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}">
									<Grid x:Name="SideBarOverlay"
										  Background="{StaticResource &#228;}">
										<Image x:Name="Image"
											   Width="{TemplateBinding attachedprops:RibbonImageResizeAttachedProps.ImageWidth}"
											   Height="{TemplateBinding attachedprops:RibbonImageResizeAttachedProps.ImageHeight}"
											   RenderOptions.BitmapScalingMode="Fant"
											   Margin="4,3,6,1"
											   VerticalAlignment="Center"
											   HorizontalAlignment="Center"
											   Source="{TemplateBinding ImageSource}" />
										<Border x:Name="CheckMarkBorder"
												Background="{TemplateBinding CheckedBackground}"
												BorderBrush="{TemplateBinding CheckedBorderBrush}"
												BorderThickness="1"
												Visibility="Hidden"
												VerticalAlignment="Center"
												HorizontalAlignment="Center"
												Margin="1"
												Width="20"
												Height="20"
												CornerRadius="2">
											<Path x:Name="CheckMark"
												  Margin="4,0,6,0"
												  Visibility="Hidden"
												  VerticalAlignment="Center"
												  HorizontalAlignment="Center"
												  Fill="{TemplateBinding Foreground}"
												  FlowDirection="LeftToRight"
												  Data="{StaticResource &#235;}" />
										</Border>
									</Grid>
								</Border>

								<ContentPresenter Grid.Column="1"
												  ContentSource="Header"
												  VerticalAlignment="Center"
												  Margin="{TemplateBinding Padding}"
												  RecognizesAccessKey="True" />

								<Path x:Name="Arrow"
									  Visibility="Collapsed"
									  Grid.Column="2"
									  VerticalAlignment="Center"
									  HorizontalAlignment="Center"
									  Fill="{TemplateBinding Foreground}"
									  Data="{StaticResource &#236;}" />
							</Grid>
						</Border>
						<Popup x:Name="PART_Popup"
							   AllowsTransparency="True"
							   VerticalOffset="-1"
							   Placement="Custom"
							   IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}"
							   Focusable="False"
							   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
							<classic:SystemDropShadowChrome x:Name="Shadow"
															Color="Transparent"
															controls:KeyTipService.IsKeyTipScope="True"
															RenderOptions.ClearTypeHint="Enabled">
								<Border Name="MenuBorder"
										BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
										Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
										BorderThickness="{TemplateBinding BorderThickness}"
										CornerRadius="2">
									<Border x:Name="SubMenuInnerBorder"
											Background="{StaticResource &#239;}"
											CornerRadius="2">
										<Grid>
											<Grid.RowDefinitions>
												<RowDefinition />
												<RowDefinition Height="Auto" />
											</Grid.RowDefinitions>
											<ScrollViewer x:Name="PART_SubMenuScrollViewer"
														  Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">

												<Grid RenderOptions.ClearTypeHint="Enabled">
													<Canvas x:Name="BackgroundCanvas"
															Height="0"
															Width="0"
															HorizontalAlignment="Left"
															VerticalAlignment="Top">
														<Rectangle x:Name="OpaqueRect"
																   Height="{Binding ElementName=MenuBorder,Path=ActualHeight}"
																   Width="{Binding ElementName=MenuBorder,Path=ActualWidth}"
																   Fill="{Binding ElementName=MenuBorder,Path=Background}"
																   RadiusX="2"
																   RadiusY="2" />
														<Rectangle x:Name="OverlayRect"
																   Height="{Binding ElementName=MenuBorder,Path=ActualHeight}"
																   Width="{Binding ElementName=MenuBorder,Path=ActualWidth}"
																   Fill="{StaticResource &#239;}"
																   RadiusX="2"
																   RadiusY="2" />
													</Canvas>

													<ItemsPresenter x:Name="ItemsPresenter"
																	Margin="2"
																	Grid.IsSharedSizeScope="True"
																	KeyboardNavigation.TabNavigation="Cycle"
																	KeyboardNavigation.DirectionalNavigation="Cycle" />

												</Grid>

											</ScrollViewer>
											<Border Name="ResizeControl"
													Grid.Row="1"
													Visibility="Collapsed"
													Background="{StaticResource &#230;}"
													BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
													BorderThickness="0,1,0,0">
												<Thumb x:Name="PART_ResizeThumb"
													   Style="{StaticResource &#231;}" />
											</Border>
										</Grid>
									</Border>
								</Border>
							</classic:SystemDropShadowChrome>
						</Popup>
					</Grid>

					<ControlTemplate.Triggers>

						<Trigger SourceName="PART_SubMenuScrollViewer"
								 Property="ScrollViewer.CanContentScroll"
								 Value="false">
							<Setter TargetName="OpaqueRect"
									Property="Canvas.Top"
									Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
							<Setter TargetName="OpaqueRect"
									Property="Canvas.Left"
									Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
							<Setter TargetName="OverlayRect"
									Property="Canvas.Top"
									Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
							<Setter TargetName="OverlayRect"
									Property="Canvas.Left"
									Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
						</Trigger>

						<Trigger Property="HasGallery"
								 Value="True">
							<Setter TargetName="PART_SubMenuScrollViewer"
									Property="HorizontalScrollBarVisibility"
									Value="Disabled" />
							<Setter TargetName="PART_SubMenuScrollViewer"
									Property="VerticalScrollBarVisibility"
									Value="Disabled" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="HasItems"
										   Value="True" />
								<Condition Property="IsCheckable"
										   Value="False" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Arrow"
									Property="Visibility"
									Value="Visible" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="CanUserResizeHorizontally"
										   Value="true" />
								<Condition Property="CanUserResizeVertically"
										   Value="true" />
							</MultiTrigger.Conditions>
							<Setter TargetName="ResizeControl"
									Property="Visibility"
									Value="Visible" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="CanUserResizeHorizontally"
										   Value="false" />
								<Condition Property="CanUserResizeVertically"
										   Value="true" />
							</MultiTrigger.Conditions>
							<Setter TargetName="ResizeControl"
									Property="Visibility"
									Value="Visible" />
							<Setter TargetName="PART_ResizeThumb"
									Property="Style"
									Value="{StaticResource &#232;}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsDropDownPositionedLeft"
										   Value="true" />
								<Condition Property="CanUserResizeHorizontally"
										   Value="true" />
								<Condition Property="CanUserResizeVertically"
										   Value="true" />
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_ResizeThumb"
									Property="Style"
									Value="{StaticResource &#240;}" />
						</MultiTrigger>
						<Trigger Property="ImageSource"
								 Value="{x:Null}">
							<Setter TargetName="Image"
									Property="Visibility"
									Value="Collapsed" />
						</Trigger>
						<Trigger Property="IsCheckable"
								 Value="True">
							<Setter TargetName="Arrow"
									Property="Visibility"
									Value="Hidden" />
						</Trigger>
						<Trigger Property="IsChecked"
								 Value="True">
							<Setter TargetName="CheckMark"
									Property="Visibility"
									Value="Visible" />
							<Setter TargetName="CheckMarkBorder"
									Property="Visibility"
									Value="Visible" />
							<Setter TargetName="Image"
									Property="Visibility"
									Value="Hidden" />
						</Trigger>
						<Trigger SourceName="PART_Popup"
								 Property="Popup.HasDropShadow"
								 Value="True">
							<Setter TargetName="Shadow"
									Property="Margin"
									Value="0,0,5,5" />
							<Setter TargetName="Shadow"
									Property="Color"
									Value="{StaticResource &#213;}" />
						</Trigger>
						<Trigger SourceName="PART_Popup"
								 Property="Popup.IsOpen"
								 Value="False">
							<Setter TargetName="PART_Popup"
									Property="PopupAnimation"
									Value="None" />
						</Trigger>
						<Trigger Property="IsHighlighted"
								 Value="True">
							<Setter TargetName="Border"
									Property="Background"
									Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
							<Setter TargetName="Border"
									Property="BorderBrush"
									Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
							<Setter TargetName="PART_SideBarBorder"
									Property="BorderBrush"
									Value="Transparent" />
							<Setter TargetName="PART_SideBarBorder"
									Property="Background"
									Value="Transparent" />
							<Setter TargetName="SideBarOverlay"
									Property="Background"
									Value="Transparent" />
						</Trigger>
						<Trigger Property="IsPressed"
								 Value="True">
							<Setter TargetName="Border"
									Property="Background"
									Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
							<Setter TargetName="Border"
									Property="BorderBrush"
									Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
							<Setter TargetName="PART_SideBarBorder"
									Property="BorderBrush"
									Value="Transparent" />
							<Setter TargetName="PART_SideBarBorder"
									Property="Background"
									Value="Transparent" />
							<Setter TargetName="SideBarOverlay"
									Property="Background"
									Value="Transparent" />
						</Trigger>

						<Trigger Property="IsEnabled"
								 Value="False">
							<Setter TargetName="Image"
									Property="Opacity"
									Value="0.5" />
							<Setter TargetName="CheckMarkBorder"
									Property="Opacity"
									Value="0.5" />
							<Setter TargetName="Arrow"
									Property="Opacity"
									Value="0.5" />
							<Setter TargetName="MainGrid"
									Property="TextElement.Foreground"
									Value="{StaticResource &#203;}" />
						</Trigger>

						<DataTrigger Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
									 Value="True">

							<Setter TargetName="BackgroundCanvas"
									Property="Visibility"
									Value="Collapsed" />

							<Setter TargetName="MainGrid"
									Property="TextElement.Foreground"
									Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
							<Setter TargetName="Arrow"
									Property="Fill"
									Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
							<Setter TargetName="Border"
									Property="CornerRadius"
									Value="0" />
							<Setter TargetName="Border"
									Property="Background"
									Value="Transparent" />
							<Setter TargetName="Border"
									Property="BorderBrush"
									Value="Transparent" />
							<Setter TargetName="CheckMark"
									Property="Fill"
									Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
							<Setter TargetName="CheckMark"
									Property="Data"
									Value="{StaticResource &#237;}" />
							<Setter TargetName="CheckMarkBorder"
									Property="CornerRadius"
									Value="0" />
							<Setter TargetName="CheckMarkBorder"
									Property="Background"
									Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
							<Setter TargetName="CheckMarkBorder"
									Property="BorderBrush"
									Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" />
							<Setter TargetName="PART_Popup"
									Property="PopupAnimation"
									Value="None" />
							<Setter TargetName="Shadow"
									Property="Color"
									Value="Transparent" />
							<Setter TargetName="SideBarOverlay"
									Property="Background"
									Value="Transparent" />
							<Setter TargetName="PART_SideBarBorder"
									Property="Background"
									Value="Transparent" />
							<Setter TargetName="PART_SideBarBorder"
									Property="BorderBrush"
									Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
							<Setter TargetName="PART_SubMenuScrollViewer"
									Property="Foreground"
									Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
							<Setter TargetName="SubMenuInnerBorder"
									Property="Background"
									Value="Transparent" />
							<Setter TargetName="SubMenuInnerBorder"
									Property="CornerRadius"
									Value="0" />
							<Setter TargetName="MenuBorder"
									Property="BorderBrush"
									Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
							<Setter TargetName="MenuBorder"
									Property="Background"
									Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
							<Setter TargetName="ResizeControl"
									Property="BorderBrush"
									Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
							<Setter TargetName="ResizeControl"
									Property="Background"
									Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
						</DataTrigger>
						<!-- HighContrast && (IsHighlighted || IsPressed ) -->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}"
										   Value="True" />
								<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
										   Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="MainGrid"
									Property="TextElement.Foreground"
									Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
							<Setter TargetName="Arrow"
									Property="Fill"
									Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
							<Setter TargetName="CheckMark"
									Property="Fill"
									Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
							<Setter TargetName="Border"
									Property="Background"
									Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
							<Setter TargetName="Border"
									Property="BorderBrush"
									Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
							<Setter TargetName="PART_SideBarBorder"
									Property="BorderBrush"
									Value="Transparent" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}"
										   Value="True" />
								<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
										   Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="MainGrid"
									Property="TextElement.Foreground"
									Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
							<Setter TargetName="Border"
									Property="Background"
									Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
							<Setter TargetName="Border"
									Property="BorderBrush"
									Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
							<Setter TargetName="PART_SideBarBorder"
									Property="BorderBrush"
									Value="Transparent" />
						</MultiDataTrigger>

						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}"
										   Value="False" />
								<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
										   Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="MainGrid"
									Property="TextElement.Foreground"
									Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
							<Setter TargetName="Arrow"
									Property="Opacity"
									Value="1" />
							<Setter TargetName="Arrow"
									Property="Fill"
									Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
							<Setter TargetName="CheckMarkBorder"
									Property="Opacity"
									Value="1" />
							<Setter TargetName="CheckMarkBorder"
									Property="BorderBrush"
									Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
							<Setter TargetName="CheckMark"
									Property="Fill"
									Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Стиль для RibbonMenuItem с языками -->
	<Style x:Key="LangRibbonMenuItemStyle"
		   TargetType="{x:Type ribbon:RibbonMenuItem}"
		   BasedOn="{StaticResource RibbonMenuItemWithResizingImg}">
		<Setter Property="attachedprops:RibbonImageResizeAttachedProps.ImageWidth"
				Value="25" />
		<Setter Property="attachedprops:RibbonImageResizeAttachedProps.ImageHeight"
				Value="25" />
	</Style>

	<BooleanToVisibilityConverter x:Key="&#212;" />

	<ControlTemplate x:Key="RibbonApplicationMenuItemStdTemplate"
					 TargetType="{x:Type ribbon:RibbonApplicationMenuItem}">
		<Border x:Name="Border"
				Background="{TemplateBinding Background}"
				BorderThickness="{TemplateBinding BorderThickness}"
				BorderBrush="{TemplateBinding BorderBrush}"
				CornerRadius="2"
				SnapsToDevicePixels="True">
			<Grid Margin="1">
				<Grid.ColumnDefinitions>
					<!--Icon or check mark column-->
					<ColumnDefinition Width="Auto"
									  SharedSizeGroup="MenuItemIconColumnGroup" />
					<!--Header column-->
					<ColumnDefinition Width="*"
									  MinWidth="44" />
					<!--Submenu arrow column-->
					<ColumnDefinition Width="22" />
				</Grid.ColumnDefinitions>

				<Image x:Name="Image"
					   Margin="6,4,6,4"
					   Width="32"
					   Height="32"
					   Source="{TemplateBinding ImageSource}"
					   VerticalAlignment="Center"
					   HorizontalAlignment="Center"
					   RenderOptions.BitmapScalingMode="Fant" />
				<Border x:Name="CheckMarkBorder"
						Background="{TemplateBinding CheckedBackground}"
						BorderBrush="{TemplateBinding CheckedBorderBrush}"
						BorderThickness="1"
						Visibility="Hidden"
						VerticalAlignment="Center"
						HorizontalAlignment="Center"
						Margin="1"
						Width="30"
						Height="30"
						CornerRadius="2">
					<Path x:Name="CheckMark"
						  Margin="4,0,6,0"
						  Visibility="Hidden"
						  VerticalAlignment="Center"
						  HorizontalAlignment="Center"
						  Fill="{TemplateBinding Foreground}"
						  FlowDirection="LeftToRight"
						  Data="{StaticResource &#235;}">
						<Path.RenderTransform>
							<ScaleTransform ScaleX="1.5"
											ScaleY="1.5" />
						</Path.RenderTransform>
					</Path>
				</Border>

				<ContentPresenter Grid.Column="1"
								  ContentSource="Header"
								  VerticalAlignment="Center"
								  HorizontalAlignment="Left"
								  Margin="{TemplateBinding Padding}"
								  RecognizesAccessKey="True" />

				<Path x:Name="Arrow"
					  Visibility="{TemplateBinding HasItems,Converter={StaticResource &#212;}}"
					  Grid.Column="2"
					  VerticalAlignment="Center"
					  HorizontalAlignment="Center"
					  Fill="{TemplateBinding Foreground}"
					  Data="{StaticResource &#236;}" />

				<!-- Note that it is important to enable PopupAnimation for the top level MenuItems even though they aren't of relevance. 
				 This is important to guarantee that the Popups close in the right order i.e. topmost to bottom most. This order is 
				 important to be able to guarantee that the SubmenuClosed event fires correctly. Please see Dev10 bug# 913562 -->

				<Popup x:Name="PART_Popup"
					   AllowsTransparency="True"
					   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
					   Placement="Relative"
					   IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}"
					   Focusable="False"
					   SnapsToDevicePixels="True">
					<classic:SystemDropShadowChrome x:Name="Shadow"
													Color="Transparent"
													controls:KeyTipService.IsKeyTipScope="True"
													RenderOptions.ClearTypeHint="Enabled">
						<Grid>
							<Border x:Name="PopupBorder"
									BorderBrush="{Binding Path=Ribbon.BorderBrush,RelativeSource={RelativeSource TemplatedParent}}"
									Background="{Binding Path=Ribbon.Background,RelativeSource={RelativeSource TemplatedParent}}"
									BorderThickness="{TemplateBinding BorderThickness}"
									CornerRadius="2" />
							<Border x:Name="PopupOverlayBorder"
									BorderBrush="{StaticResource &#227;}"
									Background="{StaticResource &#229;}"
									BorderThickness="{TemplateBinding BorderThickness}"
									CornerRadius="2">
								<Grid>
									<Grid.RowDefinitions>
										<RowDefinition />
										<RowDefinition Height="Auto" />
									</Grid.RowDefinitions>
									<ScrollViewer x:Name="PART_SubMenuScrollViewer"
												  CanContentScroll="True"
												  HorizontalScrollBarVisibility="Disabled"
												  Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">

										<Grid RenderOptions.ClearTypeHint="Enabled">
											<Canvas x:Name="BackgroundCanvas"
													Height="0"
													Width="0"
													HorizontalAlignment="Left"
													VerticalAlignment="Top">
												<Rectangle x:Name="OpaqueRect"
														   Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
														   Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
														   Fill="{Binding ElementName=PopupBorder,Path=Background}"
														   RadiusX="2"
														   RadiusY="2" />
												<Rectangle x:Name="OverlayRect"
														   Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
														   Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
														   Fill="{Binding ElementName=PopupOverlayBorder,Path=Background}"
														   RadiusX="2"
														   RadiusY="2" />
											</Canvas>

											<ItemsPresenter x:Name="ItemsPresenter"
															Margin="2"
															KeyboardNavigation.TabNavigation="Cycle"
															KeyboardNavigation.DirectionalNavigation="Cycle"
															Grid.IsSharedSizeScope="True" />

										</Grid>

									</ScrollViewer>
									<Border Name="ResizeControl"
											Grid.Row="1"
											Visibility="Collapsed"
											Background="{StaticResource &#230;}"
											BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
											BorderThickness="0,1,0,0">
										<Thumb x:Name="PART_ResizeThumb"
											   Style="{StaticResource &#231;}" />
									</Border>
								</Grid>
							</Border>
						</Grid>
					</classic:SystemDropShadowChrome>
				</Popup>
			</Grid>
		</Border>
		<ControlTemplate.Triggers>

			<Trigger SourceName="PART_SubMenuScrollViewer"
					 Property="ScrollViewer.CanContentScroll"
					 Value="false">
				<Setter TargetName="OpaqueRect"
						Property="Canvas.Top"
						Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
				<Setter TargetName="OpaqueRect"
						Property="Canvas.Left"
						Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
				<Setter TargetName="OverlayRect"
						Property="Canvas.Top"
						Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
				<Setter TargetName="OverlayRect"
						Property="Canvas.Left"
						Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
			</Trigger>

			<Trigger Property="HasGallery"
					 Value="True">
				<Setter TargetName="PART_SubMenuScrollViewer"
						Property="HorizontalScrollBarVisibility"
						Value="Disabled" />
				<Setter TargetName="PART_SubMenuScrollViewer"
						Property="VerticalScrollBarVisibility"
						Value="Disabled" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="CanUserResizeHorizontally"
							   Value="true" />
					<Condition Property="CanUserResizeVertically"
							   Value="true" />
				</MultiTrigger.Conditions>
				<Setter TargetName="ResizeControl"
						Property="Visibility"
						Value="Visible" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="CanUserResizeHorizontally"
							   Value="false" />
					<Condition Property="CanUserResizeVertically"
							   Value="true" />
				</MultiTrigger.Conditions>
				<Setter TargetName="ResizeControl"
						Property="Visibility"
						Value="Visible" />
				<Setter TargetName="PART_ResizeThumb"
						Property="Style"
						Value="{StaticResource &#232;}" />
			</MultiTrigger>
			<Trigger Property="ImageSource"
					 Value="{x:Null}">
				<Setter TargetName="Image"
						Property="Visibility"
						Value="Collapsed" />
			</Trigger>
			<Trigger Property="IsCheckable"
					 Value="True">
				<Setter TargetName="Arrow"
						Property="Visibility"
						Value="Hidden" />
			</Trigger>
			<Trigger Property="IsChecked"
					 Value="True">
				<Setter TargetName="CheckMark"
						Property="Visibility"
						Value="Visible" />
				<Setter TargetName="CheckMarkBorder"
						Property="Visibility"
						Value="Visible" />
				<Setter TargetName="Image"
						Property="Visibility"
						Value="Hidden" />
			</Trigger>
			<Trigger SourceName="PART_Popup"
					 Property="Popup.HasDropShadow"
					 Value="True">
				<Setter TargetName="Shadow"
						Property="Margin"
						Value="0,0,5,5" />
				<Setter TargetName="Shadow"
						Property="Color"
						Value="{StaticResource &#213;}" />
			</Trigger>
			<Trigger SourceName="PART_Popup"
					 Property="Popup.IsOpen"
					 Value="False">
				<Setter TargetName="PART_Popup"
						Property="PopupAnimation"
						Value="None" />
			</Trigger>
			<Trigger Property="IsHighlighted"
					 Value="True">
				<Setter TargetName="Border"
						Property="Background"
						Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
				<Setter TargetName="Border"
						Property="BorderBrush"
						Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
			</Trigger>
			<Trigger Property="IsPressed"
					 Value="True">
				<Setter TargetName="Border"
						Property="Background"
						Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
				<Setter TargetName="Border"
						Property="BorderBrush"
						Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
			</Trigger>

			<Trigger Property="IsEnabled"
					 Value="False">
				<Setter TargetName="Image"
						Property="Opacity"
						Value="0.5" />
				<Setter TargetName="CheckMarkBorder"
						Property="Opacity"
						Value="0.5" />
				<Setter TargetName="Arrow"
						Property="Opacity"
						Value="0.5" />
				<Setter TargetName="Border"
						Property="TextElement.Foreground"
						Value="{StaticResource &#203;}" />
			</Trigger>

			<DataTrigger Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
						 Value="True">
				<Setter TargetName="BackgroundCanvas"
						Property="Visibility"
						Value="Collapsed" />
				<Setter TargetName="Border"
						Property="TextElement.Foreground"
						Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
				<Setter TargetName="Border"
						Property="CornerRadius"
						Value="0" />
				<Setter TargetName="Border"
						Property="Background"
						Value="Transparent" />
				<Setter TargetName="Border"
						Property="BorderBrush"
						Value="Transparent" />
				<Setter TargetName="Arrow"
						Property="Fill"
						Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
				<Setter TargetName="CheckMark"
						Property="Fill"
						Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
				<Setter TargetName="CheckMark"
						Property="Data"
						Value="{StaticResource &#237;}" />
				<Setter TargetName="CheckMarkBorder"
						Property="CornerRadius"
						Value="0" />
				<Setter TargetName="CheckMarkBorder"
						Property="Background"
						Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
				<Setter TargetName="CheckMarkBorder"
						Property="BorderBrush"
						Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" />
				<Setter TargetName="Shadow"
						Property="Color"
						Value="Transparent" />
				<Setter TargetName="PART_Popup"
						Property="PopupAnimation"
						Value="None" />
				<Setter TargetName="PopupBorder"
						Property="Background"
						Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
				<Setter TargetName="PopupBorder"
						Property="BorderBrush"
						Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<Setter TargetName="PopupOverlayBorder"
						Property="Background"
						Value="Transparent" />
				<Setter TargetName="PopupOverlayBorder"
						Property="BorderBrush"
						Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<Setter TargetName="ResizeControl"
						Property="BorderBrush"
						Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<Setter TargetName="ResizeControl"
						Property="Background"
						Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
			</DataTrigger>
			<!-- HighContrast && (IsHighlighted || IsPressed ) -->
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}"
							   Value="True" />
					<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
							   Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter TargetName="Border"
						Property="TextElement.Foreground"
						Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
				<Setter TargetName="Border"
						Property="Background"
						Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
				<Setter TargetName="Border"
						Property="BorderBrush"
						Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
				<Setter TargetName="Arrow"
						Property="Fill"
						Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}"
							   Value="True" />
					<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
							   Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter TargetName="Border"
						Property="TextElement.Foreground"
						Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
				<Setter TargetName="Border"
						Property="Background"
						Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
				<Setter TargetName="Border"
						Property="BorderBrush"
						Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
			</MultiDataTrigger>

			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}"
							   Value="False" />
					<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
							   Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter TargetName="Border"
						Property="TextElement.Foreground"
						Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
			</MultiDataTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<ControlTemplate x:Key="RibbonApplicationMenuItemMiddleLevelTemplate"
					 TargetType="{x:Type ribbon:RibbonApplicationMenuItem}">
		<Grid x:Name="MainGrid"
			  SnapsToDevicePixels="True">
			<Border x:Name="Border"
					Background="{TemplateBinding Background}"
					BorderThickness="{TemplateBinding BorderThickness}"
					BorderBrush="{TemplateBinding BorderBrush}"
					CornerRadius="2">
				<Grid Margin="1">
					<Grid.ColumnDefinitions>
						<!--Icon or check mark column-->
						<ColumnDefinition Width="44"
										  SharedSizeGroup="MenuItemIconColumnGroup" />
						<!--Header column-->
						<ColumnDefinition Width="*" />
						<!--Submenu arrow column-->
						<ColumnDefinition Width="22" />
					</Grid.ColumnDefinitions>

					<Image x:Name="Image"
						   Margin="6,4,6,4"
						   Width="32"
						   Height="32"
						   Source="{TemplateBinding ImageSource}"
						   VerticalAlignment="Center"
						   HorizontalAlignment="Center"
						   RenderOptions.BitmapScalingMode="Fant" />
					<Border x:Name="CheckMarkBorder"
							Background="{TemplateBinding CheckedBackground}"
							BorderBrush="{TemplateBinding CheckedBorderBrush}"
							BorderThickness="1"
							Visibility="Hidden"
							VerticalAlignment="Center"
							HorizontalAlignment="Center"
							Margin="1"
							Width="30"
							Height="30"
							CornerRadius="2">
						<Path x:Name="CheckMark"
							  Margin="4,0,6,0"
							  Visibility="Hidden"
							  VerticalAlignment="Center"
							  HorizontalAlignment="Center"
							  Fill="{TemplateBinding Foreground}"
							  FlowDirection="LeftToRight"
							  Data="{StaticResource &#235;}">
							<Path.RenderTransform>
								<ScaleTransform ScaleX="1.5"
												ScaleY="1.5" />
							</Path.RenderTransform>
						</Path>
					</Border>

					<ContentPresenter Grid.Column="1"
									  ContentSource="Header"
									  VerticalAlignment="Center"
									  HorizontalAlignment="Left"
									  Margin="{TemplateBinding Padding}"
									  RecognizesAccessKey="True" />

					<Path x:Name="Arrow"
						  Visibility="{TemplateBinding HasItems,Converter={StaticResource &#212;}}"
						  Grid.Column="2"
						  VerticalAlignment="Center"
						  HorizontalAlignment="Center"
						  Fill="{TemplateBinding Foreground}"
						  Data="{StaticResource &#236;}" />
				</Grid>
			</Border>
			<Popup x:Name="PART_Popup"
				   AllowsTransparency="True"
				   VerticalOffset="-1"
				   Placement="Custom"
				   IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}"
				   Focusable="False"
				   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
				   SnapsToDevicePixels="True">
				<classic:SystemDropShadowChrome x:Name="Shadow"
												Color="Transparent"
												controls:KeyTipService.IsKeyTipScope="True"
												RenderOptions.ClearTypeHint="Enabled">
					<Grid>
						<Border x:Name="PopupBorder"
								BorderBrush="{Binding Path=Ribbon.BorderBrush,RelativeSource={RelativeSource TemplatedParent}}"
								Background="{Binding Path=Ribbon.Background,RelativeSource={RelativeSource TemplatedParent}}"
								BorderThickness="{TemplateBinding BorderThickness}"
								CornerRadius="2" />
						<Border x:Name="PopupOverlayBorder"
								BorderBrush="{StaticResource &#227;}"
								Background="{StaticResource &#229;}"
								BorderThickness="{TemplateBinding BorderThickness}"
								CornerRadius="2">

							<Grid>
								<Grid.RowDefinitions>
									<RowDefinition />
									<RowDefinition Height="Auto" />
								</Grid.RowDefinitions>
								<ScrollViewer x:Name="PART_SubMenuScrollViewer"
											  CanContentScroll="True"
											  HorizontalScrollBarVisibility="Disabled"
											  Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">

									<Grid RenderOptions.ClearTypeHint="Enabled">
										<Canvas x:Name="BackgroundCanvas"
												Height="0"
												Width="0"
												HorizontalAlignment="Left"
												VerticalAlignment="Top">
											<Rectangle x:Name="OpaqueRect"
													   Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
													   Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
													   Fill="{Binding ElementName=PopupBorder,Path=Background}"
													   RadiusX="2"
													   RadiusY="2" />
											<Rectangle x:Name="OverlayRect"
													   Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
													   Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
													   Fill="{Binding ElementName=PopupOverlayBorder,Path=Background}"
													   RadiusX="2"
													   RadiusY="2" />
											<Rectangle x:Name="InnerOverlayRect"
													   Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
													   Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
													   Fill="{StaticResource &#239;}"
													   RadiusX="2"
													   RadiusY="2" />
										</Canvas>

										<ItemsPresenter x:Name="ItemsPresenter"
														Margin="2"
														KeyboardNavigation.TabNavigation="Cycle"
														KeyboardNavigation.DirectionalNavigation="Cycle"
														Grid.IsSharedSizeScope="True" />

									</Grid>

								</ScrollViewer>
								<Border Name="ResizeControl"
										Grid.Row="1"
										Visibility="Collapsed"
										Background="{StaticResource &#230;}"
										BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
										BorderThickness="0,1,0,0">
									<Thumb x:Name="PART_ResizeThumb"
										   Style="{StaticResource &#231;}" />
								</Border>
							</Grid>
						</Border>
					</Grid>
				</classic:SystemDropShadowChrome>
			</Popup>
		</Grid>
		<ControlTemplate.Triggers>

			<Trigger SourceName="PART_SubMenuScrollViewer"
					 Property="ScrollViewer.CanContentScroll"
					 Value="false">
				<Setter TargetName="OpaqueRect"
						Property="Canvas.Top"
						Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
				<Setter TargetName="OpaqueRect"
						Property="Canvas.Left"
						Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
				<Setter TargetName="OverlayRect"
						Property="Canvas.Top"
						Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
				<Setter TargetName="OverlayRect"
						Property="Canvas.Left"
						Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
				<Setter TargetName="InnerOverlayRect"
						Property="Canvas.Top"
						Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
				<Setter TargetName="InnerOverlayRect"
						Property="Canvas.Left"
						Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
			</Trigger>

			<Trigger Property="HasGallery"
					 Value="True">
				<Setter TargetName="PART_SubMenuScrollViewer"
						Property="HorizontalScrollBarVisibility"
						Value="Disabled" />
				<Setter TargetName="PART_SubMenuScrollViewer"
						Property="VerticalScrollBarVisibility"
						Value="Disabled" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="CanUserResizeHorizontally"
							   Value="true" />
					<Condition Property="CanUserResizeVertically"
							   Value="true" />
				</MultiTrigger.Conditions>
				<Setter TargetName="ResizeControl"
						Property="Visibility"
						Value="Visible" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="CanUserResizeHorizontally"
							   Value="false" />
					<Condition Property="CanUserResizeVertically"
							   Value="true" />
				</MultiTrigger.Conditions>
				<Setter TargetName="ResizeControl"
						Property="Visibility"
						Value="Visible" />
				<Setter TargetName="PART_ResizeThumb"
						Property="Style"
						Value="{StaticResource &#232;}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsDropDownPositionedLeft"
							   Value="true" />
					<Condition Property="CanUserResizeHorizontally"
							   Value="true" />
					<Condition Property="CanUserResizeVertically"
							   Value="true" />
				</MultiTrigger.Conditions>
				<Setter TargetName="PART_ResizeThumb"
						Property="Style"
						Value="{StaticResource &#240;}" />
			</MultiTrigger>
			<Trigger Property="ImageSource"
					 Value="{x:Null}">
				<Setter TargetName="Image"
						Property="Visibility"
						Value="Collapsed" />
			</Trigger>
			<Trigger Property="IsCheckable"
					 Value="True">
				<Setter TargetName="Arrow"
						Property="Visibility"
						Value="Hidden" />
			</Trigger>
			<Trigger Property="IsChecked"
					 Value="True">
				<Setter TargetName="CheckMark"
						Property="Visibility"
						Value="Visible" />
				<Setter TargetName="CheckMarkBorder"
						Property="Visibility"
						Value="Visible" />
				<Setter TargetName="Image"
						Property="Visibility"
						Value="Hidden" />
			</Trigger>
			<Trigger SourceName="PART_Popup"
					 Property="Popup.HasDropShadow"
					 Value="True">
				<Setter TargetName="Shadow"
						Property="Margin"
						Value="0,0,5,5" />
				<Setter TargetName="Shadow"
						Property="Color"
						Value="{StaticResource &#213;}" />
			</Trigger>
			<Trigger SourceName="PART_Popup"
					 Property="Popup.IsOpen"
					 Value="False">
				<Setter TargetName="PART_Popup"
						Property="PopupAnimation"
						Value="None" />
			</Trigger>
			<Trigger Property="IsHighlighted"
					 Value="True">
				<Setter TargetName="Border"
						Property="Background"
						Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
				<Setter TargetName="Border"
						Property="BorderBrush"
						Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
			</Trigger>
			<Trigger Property="IsPressed"
					 Value="True">
				<Setter TargetName="Border"
						Property="Background"
						Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
				<Setter TargetName="Border"
						Property="BorderBrush"
						Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
			</Trigger>

			<Trigger Property="IsEnabled"
					 Value="False">
				<Setter TargetName="Image"
						Property="Opacity"
						Value="0.5" />
				<Setter TargetName="CheckMarkBorder"
						Property="Opacity"
						Value="0.5" />
				<Setter TargetName="Arrow"
						Property="Opacity"
						Value="0.5" />
				<Setter TargetName="MainGrid"
						Property="TextElement.Foreground"
						Value="{StaticResource &#203;}" />
			</Trigger>

			<DataTrigger Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
						 Value="True">
				<Setter TargetName="BackgroundCanvas"
						Property="Visibility"
						Value="Collapsed" />
				<Setter TargetName="MainGrid"
						Property="TextElement.Foreground"
						Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
				<Setter TargetName="Border"
						Property="CornerRadius"
						Value="0" />
				<Setter TargetName="Border"
						Property="Background"
						Value="Transparent" />
				<Setter TargetName="Border"
						Property="BorderBrush"
						Value="Transparent" />
				<Setter TargetName="Arrow"
						Property="Fill"
						Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
				<Setter TargetName="CheckMark"
						Property="Fill"
						Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
				<Setter TargetName="CheckMark"
						Property="Data"
						Value="{StaticResource &#237;}" />
				<Setter TargetName="CheckMarkBorder"
						Property="CornerRadius"
						Value="0" />
				<Setter TargetName="CheckMarkBorder"
						Property="Background"
						Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
				<Setter TargetName="CheckMarkBorder"
						Property="BorderBrush"
						Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" />
				<Setter TargetName="Shadow"
						Property="Color"
						Value="Transparent" />
				<Setter TargetName="PART_Popup"
						Property="PopupAnimation"
						Value="None" />
				<Setter TargetName="PopupBorder"
						Property="Background"
						Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
				<Setter TargetName="PopupBorder"
						Property="BorderBrush"
						Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<Setter TargetName="PopupOverlayBorder"
						Property="Background"
						Value="Transparent" />
				<Setter TargetName="PopupOverlayBorder"
						Property="BorderBrush"
						Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<Setter TargetName="PART_SubMenuScrollViewer"
						Property="Foreground"
						Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
				<Setter TargetName="ResizeControl"
						Property="BorderBrush"
						Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<Setter TargetName="ResizeControl"
						Property="Background"
						Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
			</DataTrigger>
			<!-- HighContrast && (IsHighlighted || IsPressed ) -->
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}"
							   Value="True" />
					<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
							   Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter TargetName="MainGrid"
						Property="TextElement.Foreground"
						Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
				<Setter TargetName="Border"
						Property="Background"
						Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
				<Setter TargetName="Border"
						Property="BorderBrush"
						Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
				<Setter TargetName="Arrow"
						Property="Fill"
						Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}"
							   Value="True" />
					<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
							   Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter TargetName="MainGrid"
						Property="TextElement.Foreground"
						Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
				<Setter TargetName="Border"
						Property="Background"
						Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
				<Setter TargetName="Border"
						Property="BorderBrush"
						Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
			</MultiDataTrigger>

			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}"
							   Value="False" />
					<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
							   Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter TargetName="MainGrid"
						Property="TextElement.Foreground"
						Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
			</MultiDataTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<ControlTemplate x:Key="RibbonApplicationMenuItemSubLevelTemplate"
					 TargetType="{x:Type ribbon:RibbonApplicationMenuItem}">
		<Grid x:Name="MainGrid"
			  SnapsToDevicePixels="True">
			<Border x:Name="Border"
					Background="{TemplateBinding Background}"
					BorderThickness="{TemplateBinding BorderThickness}"
					BorderBrush="{TemplateBinding BorderBrush}"
					CornerRadius="2">
				<Grid Margin="1">
					<Grid.ColumnDefinitions>
						<ColumnDefinition MinWidth="24"
										  Width="Auto"
										  SharedSizeGroup="MenuItemIconColumnGroup" />
						<ColumnDefinition Width="4" />
						<ColumnDefinition Width="*" />
						<ColumnDefinition Width="37" />
						<ColumnDefinition Width="17" />
					</Grid.ColumnDefinitions>

					<Image x:Name="Image"
						   Margin="1"
						   Width="16"
						   Height="16"
						   Source="{TemplateBinding ImageSource}"
						   VerticalAlignment="Center"
						   HorizontalAlignment="Center"
						   RenderOptions.BitmapScalingMode="Fant" />
					<Border x:Name="CheckMarkBorder"
							Background="{TemplateBinding CheckedBackground}"
							BorderBrush="{TemplateBinding CheckedBorderBrush}"
							BorderThickness="1"
							Visibility="Hidden"
							VerticalAlignment="Center"
							HorizontalAlignment="Center"
							Margin="1"
							Width="20"
							Height="20"
							CornerRadius="2">
						<Path x:Name="CheckMark"
							  Margin="4,0,6,0"
							  Visibility="Hidden"
							  VerticalAlignment="Center"
							  HorizontalAlignment="Center"
							  Fill="{TemplateBinding Foreground}"
							  FlowDirection="LeftToRight"
							  Data="{StaticResource &#235;}" />
					</Border>

					<ContentPresenter Grid.Column="2"
									  ContentSource="Header"
									  VerticalAlignment="Center"
									  HorizontalAlignment="Left"
									  Margin="{TemplateBinding Padding}"
									  RecognizesAccessKey="True" />
					<Path x:Name="Arrow"
						  Visibility="{TemplateBinding HasItems,Converter={StaticResource &#212;}}"
						  Grid.Column="5"
						  VerticalAlignment="Center"
						  Margin="4,0,0,0"
						  Fill="{TemplateBinding Foreground}"
						  Data="{StaticResource &#236;}" />
				</Grid>
			</Border>
			<Popup x:Name="PART_Popup"
				   AllowsTransparency="True"
				   VerticalOffset="-1"
				   Placement="Custom"
				   IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}"
				   Focusable="False"
				   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
				   SnapsToDevicePixels="True">
				<classic:SystemDropShadowChrome x:Name="Shadow"
												Color="Transparent"
												controls:KeyTipService.IsKeyTipScope="True"
												RenderOptions.ClearTypeHint="Enabled">
					<Grid>
						<Border x:Name="PopupBorder"
								BorderBrush="{Binding Path=Ribbon.BorderBrush,RelativeSource={RelativeSource TemplatedParent}}"
								Background="{Binding Path=Ribbon.Background,RelativeSource={RelativeSource TemplatedParent}}"
								BorderThickness="{TemplateBinding BorderThickness}"
								CornerRadius="2" />
						<Border x:Name="PopupOverlayBorder"
								BorderBrush="{StaticResource &#227;}"
								Background="{StaticResource &#229;}"
								BorderThickness="{TemplateBinding BorderThickness}"
								CornerRadius="2">

							<Grid>
								<Grid.RowDefinitions>
									<RowDefinition />
									<RowDefinition Height="Auto" />
								</Grid.RowDefinitions>
								<ScrollViewer x:Name="PART_SubMenuScrollViewer"
											  CanContentScroll="True"
											  Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">

									<Grid RenderOptions.ClearTypeHint="Enabled">
										<Canvas x:Name="BackgroundCanvas"
												Height="0"
												Width="0"
												HorizontalAlignment="Left"
												VerticalAlignment="Top">
											<Rectangle x:Name="OpaqueRect"
													   Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
													   Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
													   Fill="{Binding ElementName=PopupBorder,Path=Background}"
													   RadiusX="2"
													   RadiusY="2" />
											<Rectangle x:Name="OverlayRect"
													   Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
													   Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
													   Fill="{Binding ElementName=PopupOverlayBorder,Path=Background}"
													   RadiusX="2"
													   RadiusY="2" />
											<Rectangle x:Name="InnerOverlayRect"
													   Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
													   Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
													   Fill="{StaticResource &#239;}"
													   RadiusX="2"
													   RadiusY="2" />
										</Canvas>

										<ItemsPresenter x:Name="ItemsPresenter"
														Margin="2"
														KeyboardNavigation.TabNavigation="Cycle"
														KeyboardNavigation.DirectionalNavigation="Cycle"
														Grid.IsSharedSizeScope="True" />

									</Grid>

								</ScrollViewer>
								<Border Name="ResizeControl"
										Grid.Row="1"
										Visibility="Collapsed"
										Background="{StaticResource &#230;}"
										BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
										BorderThickness="0,1,0,0">
									<Thumb x:Name="PART_ResizeThumb"
										   Style="{StaticResource &#231;}" />
								</Border>
							</Grid>
						</Border>
					</Grid>
				</classic:SystemDropShadowChrome>
			</Popup>
		</Grid>
		<ControlTemplate.Triggers>

			<Trigger SourceName="PART_SubMenuScrollViewer"
					 Property="ScrollViewer.CanContentScroll"
					 Value="false">
				<Setter TargetName="OpaqueRect"
						Property="Canvas.Top"
						Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
				<Setter TargetName="OpaqueRect"
						Property="Canvas.Left"
						Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
				<Setter TargetName="OverlayRect"
						Property="Canvas.Top"
						Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
				<Setter TargetName="OverlayRect"
						Property="Canvas.Left"
						Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
				<Setter TargetName="InnerOverlayRect"
						Property="Canvas.Top"
						Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
				<Setter TargetName="InnerOverlayRect"
						Property="Canvas.Left"
						Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
			</Trigger>

			<Trigger Property="HasGallery"
					 Value="True">
				<Setter TargetName="PART_SubMenuScrollViewer"
						Property="HorizontalScrollBarVisibility"
						Value="Disabled" />
				<Setter TargetName="PART_SubMenuScrollViewer"
						Property="VerticalScrollBarVisibility"
						Value="Disabled" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="CanUserResizeHorizontally"
							   Value="true" />
					<Condition Property="CanUserResizeVertically"
							   Value="true" />
				</MultiTrigger.Conditions>
				<Setter TargetName="ResizeControl"
						Property="Visibility"
						Value="Visible" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="CanUserResizeHorizontally"
							   Value="false" />
					<Condition Property="CanUserResizeVertically"
							   Value="true" />
				</MultiTrigger.Conditions>
				<Setter TargetName="ResizeControl"
						Property="Visibility"
						Value="Visible" />
				<Setter TargetName="PART_ResizeThumb"
						Property="Style"
						Value="{StaticResource &#232;}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsDropDownPositionedLeft"
							   Value="true" />
					<Condition Property="CanUserResizeHorizontally"
							   Value="true" />
					<Condition Property="CanUserResizeVertically"
							   Value="true" />
				</MultiTrigger.Conditions>
				<Setter TargetName="PART_ResizeThumb"
						Property="Style"
						Value="{StaticResource &#240;}" />
			</MultiTrigger>
			<Trigger Property="ImageSource"
					 Value="{x:Null}">
				<Setter TargetName="Image"
						Property="Visibility"
						Value="Collapsed" />
			</Trigger>
			<Trigger Property="IsCheckable"
					 Value="True">
				<Setter TargetName="Arrow"
						Property="Visibility"
						Value="Hidden" />
			</Trigger>
			<Trigger Property="IsChecked"
					 Value="True">
				<Setter TargetName="CheckMark"
						Property="Visibility"
						Value="Visible" />
				<Setter TargetName="CheckMarkBorder"
						Property="Visibility"
						Value="Visible" />
				<Setter TargetName="Image"
						Property="Visibility"
						Value="Hidden" />
			</Trigger>
			<Trigger SourceName="PART_Popup"
					 Property="Popup.HasDropShadow"
					 Value="True">
				<Setter TargetName="Shadow"
						Property="Margin"
						Value="0,0,5,5" />
				<Setter TargetName="Shadow"
						Property="Color"
						Value="{StaticResource &#213;}" />
			</Trigger>
			<Trigger SourceName="PART_Popup"
					 Property="Popup.IsOpen"
					 Value="False">
				<Setter TargetName="PART_Popup"
						Property="PopupAnimation"
						Value="None" />
			</Trigger>
			<Trigger Property="IsHighlighted"
					 Value="True">
				<Setter TargetName="Border"
						Property="Background"
						Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
				<Setter TargetName="Border"
						Property="BorderBrush"
						Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
			</Trigger>
			<Trigger Property="IsPressed"
					 Value="True">
				<Setter TargetName="Border"
						Property="Background"
						Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
				<Setter TargetName="Border"
						Property="BorderBrush"
						Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
			</Trigger>

			<Trigger Property="IsEnabled"
					 Value="False">
				<Setter TargetName="Image"
						Property="Opacity"
						Value="0.5" />
				<Setter TargetName="CheckMarkBorder"
						Property="Opacity"
						Value="0.5" />
				<Setter TargetName="Arrow"
						Property="Opacity"
						Value="0.5" />
				<Setter TargetName="MainGrid"
						Property="TextElement.Foreground"
						Value="{StaticResource &#203;}" />
			</Trigger>

			<DataTrigger Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
						 Value="True">

				<Setter TargetName="BackgroundCanvas"
						Property="Visibility"
						Value="Collapsed" />

				<Setter TargetName="MainGrid"
						Property="TextElement.Foreground"
						Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
				<Setter TargetName="Border"
						Property="CornerRadius"
						Value="0" />
				<Setter TargetName="Border"
						Property="Background"
						Value="Transparent" />
				<Setter TargetName="Border"
						Property="BorderBrush"
						Value="Transparent" />
				<Setter TargetName="Arrow"
						Property="Fill"
						Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
				<Setter TargetName="CheckMark"
						Property="Fill"
						Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
				<Setter TargetName="CheckMark"
						Property="Data"
						Value="{StaticResource &#237;}" />
				<Setter TargetName="CheckMarkBorder"
						Property="CornerRadius"
						Value="0" />
				<Setter TargetName="CheckMarkBorder"
						Property="Background"
						Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
				<Setter TargetName="CheckMarkBorder"
						Property="BorderBrush"
						Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" />
				<Setter TargetName="Shadow"
						Property="Color"
						Value="Transparent" />
				<Setter TargetName="PART_Popup"
						Property="PopupAnimation"
						Value="None" />
				<Setter TargetName="PopupBorder"
						Property="Background"
						Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
				<Setter TargetName="PopupBorder"
						Property="BorderBrush"
						Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<Setter TargetName="PopupOverlayBorder"
						Property="Background"
						Value="Transparent" />
				<Setter TargetName="PopupOverlayBorder"
						Property="BorderBrush"
						Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<Setter TargetName="PART_SubMenuScrollViewer"
						Property="Foreground"
						Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
				<Setter TargetName="ResizeControl"
						Property="BorderBrush"
						Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<Setter TargetName="ResizeControl"
						Property="Background"
						Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
			</DataTrigger>
			<!-- HighContrast && (IsHighlighted || IsPressed ) -->
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}"
							   Value="True" />
					<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
							   Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter TargetName="MainGrid"
						Property="TextElement.Foreground"
						Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
				<Setter TargetName="Border"
						Property="Background"
						Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
				<Setter TargetName="Border"
						Property="BorderBrush"
						Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
				<Setter TargetName="Arrow"
						Property="Fill"
						Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}"
							   Value="True" />
					<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
							   Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter TargetName="MainGrid"
						Property="TextElement.Foreground"
						Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
				<Setter TargetName="Border"
						Property="Background"
						Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
				<Setter TargetName="Border"
						Property="BorderBrush"
						Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
			</MultiDataTrigger>

			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}"
							   Value="False" />
					<Condition Binding="{Binding Path=HighContrast, Source={x:Static shell:SystemParameters2.Current}}"
							   Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter TargetName="MainGrid"
						Property="TextElement.Foreground"
						Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
			</MultiDataTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- Стиль RibbonApplicationMenuItem, у которого картинка будет масшабироваться без "изъеденных углов" -->
	<Style x:Key="RibbonApplicationMenuItemWithGoodImgScaling"
		   TargetType="{x:Type ribbon:RibbonApplicationMenuItem}">
		<Setter Property="HorizontalContentAlignment"
				Value="{Binding Path=HorizontalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="VerticalContentAlignment"
				Value="{Binding Path=VerticalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="Background"
				Value="Transparent" />
		<Setter Property="BorderBrush"
				Value="Transparent" />
		<Setter Property="BorderThickness"
				Value="1" />
		<Setter Property="FocusVisualStyle"
				Value="{x:Null}" />
		<Setter Property="Padding"
				Value="3,2,3,2" />
		<Setter Property="MouseOverBorderBrush"
				Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}" />
		<Setter Property="MouseOverBackground"
				Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}" />
		<Setter Property="PressedBorderBrush"
				Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
		<Setter Property="PressedBackground"
				Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
		<Setter Property="CheckedBorderBrush"
				Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.CheckedBorderBrush}" />
		<Setter Property="CheckedBackground"
				Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.CheckedBackground}" />
		<!-- FocusedBorderBrush and FocusedBackground are used when the control is added to QAT -->
		<Setter Property="ribbon:RibbonControlService.FocusedBorderBrush"
				Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}" />
		<Setter Property="ribbon:RibbonControlService.FocusedBackground"
				Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
		<Setter Property="ToolTipService.InitialShowDelay"
				Value="{StaticResource &#224;}" />
		<Setter Property="ToolTipService.BetweenShowDelay"
				Value="{StaticResource &#224;}" />
		<Setter Property="ToolTipService.ShowDuration"
				Value="{StaticResource &#225;}" />
		<Setter Property="Template"
				Value="{StaticResource RibbonApplicationMenuItemStdTemplate}" />
		<Style.Triggers>
			<Trigger Property="Level"
					 Value="Middle">
				<Setter Property="Template"
						Value="{StaticResource RibbonApplicationMenuItemMiddleLevelTemplate}" />
			</Trigger>

			<Trigger Property="Level"
					 Value="Sub">
				<Setter Property="Template"
						Value="{StaticResource RibbonApplicationMenuItemSubLevelTemplate}" />
			</Trigger>
		</Style.Triggers>
	</Style>
</ResourceDictionary>