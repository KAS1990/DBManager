<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:ribbon="clr-namespace:Microsoft.Windows.Controls.Ribbon;assembly=RibbonControlsLibrary"
					xmlns:viselements="clr-namespace:DBManager.InterfaceElements"
					xmlns:attachedprops="clr-namespace:DBManager.AttachedProperties"
					xmlns:sys="clr-namespace:System;assembly=mscorlib">

	<SolidColorBrush x:Key="PlainResultsBrush" Color="White" />
	<SolidColorBrush x:Key="NextRoundMembersCountBrush" Color="#FFC5D9F1" />
	<SolidColorBrush x:Key="InvitedToStartBrush" Color="#FF92D050" />
	<SolidColorBrush x:Key="PreparingBrush" Color="Yellow" />
	<SolidColorBrush x:Key="JustRecievedResultBrush" Color="#FFC2D69A" />
	<SolidColorBrush x:Key="StayOnStartBrush" Color="#FFFAC090" />
	<SolidColorBrush x:Key="DataGridLinesBrush" Color="Gray" />
	
	<sys:Double x:Key="DefaultFontSize">14</sys:Double>
	<sys:String x:Key="DefaultFontFamilyName">Arial</sys:String>
	
	<Style TargetType="ComboBox">
		<Setter Property="Padding"
				Value="5,4,0,4" />
		<Setter Property="Height"
				Value="Auto" />
	</Style>

	<!-- Стиль для TextBox, чтобы они не поддерживали перетаскивание и были тёмными, если они ReadOnly.
		Так же он устанавливает выравние текста по вертикали по центру -->
	<Style TargetType="TextBox">
		<Setter Property="AllowDrop"
				Value="false" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Style.Triggers>
			<Trigger Property="IsReadOnly"
						Value="True">
				<Setter Property="Background"
						Value="#FFF4F4F4" />
			</Trigger>
		</Style.Triggers>
	</Style>
		
	<!-- Стиль для TextBox, чтобы они не поддерживали перетаскивание и были тёмными, если они ReadOnly.
		Так же он устанавливает выравние текста по вертикали по центру -->
	<Style x:Key="DefaultTextBoxStyle"
			TargetType="TextBox">
		<Setter Property="AllowDrop"
				Value="false" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Style.Triggers>
			<Trigger Property="IsReadOnly"
						Value="True">
				<Setter Property="Background"
						Value="#FFF4F4F4" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<!-- Стиль для TextBoxEx, чтобы они не поддерживали перетаскивание и были тёмными, если они ReadOnly
		Так же он устанавливает выравние текста по вертикали по центру -->
	<Style x:Key="DefaultTextBoxExStyle"
			TargetType="viselements:TextBoxEx">
		<Setter Property="AllowDrop"
				Value="false" />
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Style.Triggers>
			<Trigger Property="IsReadOnly"
						Value="True">
				<Setter Property="Background"
						Value="#FFF4F4F4" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<!--Стиль для TextBlock, чтобы он становился серым, когда IsEnabled = false,
	т.к. по умолчанию он этого не делает -->
	<Style TargetType="TextBlock">
		<Style.Triggers>
			<Trigger Property="IsEnabled"
						Value="False">
				<Setter Property="Foreground"
						Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<!--Стиль для кнопки "Отмена"-->
	<Style x:Key="CancelButtonStyle"
			TargetType="Button">
		<Setter Property="Padding"
				Value="3" />
		<Setter Property="MinWidth"
				Value="75" />
		<Setter Property="IsCancel"
				Value="true" />
	</Style>

	<!--Стиль для кнопки "ОК"-->
	<Style x:Key="ОКButtonStyle"
			TargetType="Button">
		<Setter Property="Padding"
				Value="3" />
		<Setter Property="MinWidth"
				Value="75" />
		<Setter Property="IsDefault"
				Value="true" />
	</Style>

	<!--Стиль для кнопки "Закрыть"-->
	<Style x:Key="CloseButtonStyle"
			TargetType="Button">
		<Setter Property="Padding"
				Value="3" />
		<Setter Property="MinWidth"
				Value="75" />
		<Setter Property="IsCancel"
				Value="true" />
	</Style>

	<!--Стиль для кнопки "Применить"-->
	<Style x:Key="ApplyButtonStyle"
			TargetType="Button">
		<Setter Property="Padding"
				Value="3" />
		<Setter Property="MinWidth"
				Value="75" />
	</Style>

	<Style TargetType="Button">
		<Setter Property="Padding"
				Value="3,0,3,0" />
		<Setter Property="MinHeight"
				Value="23" />
		<Style.Triggers>
			<Trigger Property="Content"
						Value="{Loc resOK}">
				<Setter Property="MinWidth"
						Value="75" />
				<Setter Property="IsDefault"
						Value="true" />
			</Trigger>
			<Trigger Property="Content"
						Value="{Loc resCancel}">
				<Setter Property="MinWidth"
						Value="75" />
				<Setter Property="IsCancel"
						Value="true" />
			</Trigger>
			<Trigger Property="Content"
						Value="{Loc resClose}">
				<Setter Property="MinWidth"
						Value="75" />
				<Setter Property="IsCancel"
						Value="true" />
			</Trigger>
			<Trigger Property="Content"
						Value="{Loc resApply}">
				<Setter Property="MinWidth"
						Value="75" />
			</Trigger>

		</Style.Triggers>
	</Style>

	<!-- Стиль для Image, чтобы он затенялся, если он Disabled -->
	<Style TargetType="{x:Type Image}">
		<Style.Triggers>
			<Trigger Property="IsEnabled"
						Value="False">
				<Setter Property="Opacity"
						Value="0.5" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<!-- Стиль для GroupBox, у которого нет заголовка -->
	<Style x:Key="GroupBoxWithOutHeader"
			TargetType="{x:Type GroupBox}">
		<Setter Property="BorderBrush"
				Value="#D5DFE5" />
		<Setter Property="BorderThickness"
				Value="1" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type GroupBox}">
					<Grid SnapsToDevicePixels="true">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="6" />
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="6" />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
							<RowDefinition Height="Auto" />
							<RowDefinition Height="*" />
							<RowDefinition Height="6" />
						</Grid.RowDefinitions>
						<Border BorderBrush="Transparent"
								BorderThickness="{TemplateBinding BorderThickness}"
								Background="{TemplateBinding Background}"
								Grid.ColumnSpan="3"
								Grid.Column="0"
								CornerRadius="4"
								Grid.Row="1"
								Grid.RowSpan="3" />
						<ContentPresenter Grid.Column="1"
											Margin="{TemplateBinding Padding}"
											Grid.Row="2"
											SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						<ContentPresenter ContentSource="Header"
											RecognizesAccessKey="True"
											SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
											Grid.Row="1"
											Grid.RowSpan="2"
											Grid.Column="1"
											HorizontalAlignment="Center"
											VerticalAlignment="Center"
											RenderTransformOrigin="0.5,0.5">
							<ContentPresenter.RenderTransform>
								<RotateTransform Angle="45" />
							</ContentPresenter.RenderTransform>
						</ContentPresenter>
						<Border BorderBrush="White"
								BorderThickness="{TemplateBinding BorderThickness}"
								Grid.ColumnSpan="3"
								CornerRadius="4"
								Grid.Row="1"
								Grid.RowSpan="3">
							<Border BorderBrush="{TemplateBinding BorderBrush}"
									BorderThickness="{TemplateBinding BorderThickness}"
									CornerRadius="3">
								<Border BorderBrush="White"
										BorderThickness="{TemplateBinding BorderThickness}"
										CornerRadius="2" />
							</Border>
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<Style x:Key="StartStopRibbonButtonStyle"
		   TargetType="{x:Type ribbon:RibbonButton}">
		<Setter Property="LargeImageSource"
				Value="/RibbonIcons/START.png" />
		<Setter Property="ToolTip"
				Value="{Loc resStartTestToolTip}" />
		<Setter Property="IsEnabled"
				Value="{Binding AutoupdatingAvailable}" />
		
		<Style.Triggers>
			<Trigger Property="Tag"
					 Value="StopStyle">
				<Setter Property="LargeImageSource"
						Value="/RibbonIcons/STOP.png" />
				<Setter Property="ToolTip"
						Value="{Loc resStopTestToolTip}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	
	<DataTemplate x:Key="ListViewHeaderTemplateAsc">
		<Grid>
			<ContentPresenter Content="{Binding}" />
			<Path x:Name="arrow"
					HorizontalAlignment="Center"
					StrokeThickness="1"
					Fill="#FF51CEFA"
					Data="M 1,5 L 15,5 L 10,0 L 5,5" />
		</Grid>
	</DataTemplate>

	<DataTemplate x:Key="ListViewHeaderTemplateDesc">
		<Grid>
			<ContentPresenter Content="{Binding}" />
			<Path x:Name="arrow"
					HorizontalAlignment="Center"
					StrokeThickness="1"
					Fill="#FF51CEFA"
					Data="M 5,0 L 10,5 L 15,0 L 5,0" />
		</Grid>
	</DataTemplate>
	
	<!-- Cтиль для кнопок с картинками, у которых может быть две картинки -->
	<Style x:Key="With2PicturesButtonStyle" TargetType="{x:Type Button}">
		<Setter Property="Template" >
			<Setter.Value>
				<ControlTemplate>
					<Image Source="{TemplateBinding attachedprops:BtnWithImagesAttachedProps.Image}" 
						   RenderOptions.BitmapScalingMode="Fant" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>

		<Setter Property="Height" Value="26" />
		<Setter Property="Width" Value="26" />

		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="true">
				<Setter Property="Template" >
					<Setter.Value>
						<ControlTemplate>
							<Image Source="{TemplateBinding attachedprops:BtnWithImagesAttachedProps.ImageOnFocus}"
								   RenderOptions.BitmapScalingMode="Fant" />
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>
	
	<!-- Стиль для кнопки "Стрелка влево" -->
	<Style x:Key="LeftButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource With2PicturesButtonStyle}">
		<Setter Property="attachedprops:BtnWithImagesAttachedProps.Image"
				Value="/Icons/key_Left.png" />
		<Setter Property="attachedprops:BtnWithImagesAttachedProps.ImageOnFocus"
				Value="/Icons/key_Left.OnFocus.png" />
	</Style>

	<!-- Стиль для кнопки "Стрелка вправо" -->
	<Style x:Key="RightButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource With2PicturesButtonStyle}">
		<Setter Property="attachedprops:BtnWithImagesAttachedProps.Image"
				Value="/Icons/key_Right.png" />
		<Setter Property="attachedprops:BtnWithImagesAttachedProps.ImageOnFocus"
				Value="/Icons/key_Right.OnFocus.png" />
	</Style>
</ResourceDictionary>